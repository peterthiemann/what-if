module Simple.StackBasedBigStep where

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Unit using (‚ä§; tt)
open import Data.String using (String; _‚âü_)
open import Data.List using (List; []; _‚à∑_; [_]; _++_; length; lookup; map; take)
open import Data.List.Properties using (length-++; ++-identity ≥; ++-assoc)
open import Data.List.NonEmpty using (List‚Å∫; _‚à∑_; _‚à∑‚Å∫_; head; tail)
open import Data.List.Relation.Binary.Pointwise using (Pointwise; []; _‚à∑_)
open import Data.Bool using (Bool; true; false) renaming (T to ùïã)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<·µá_; _<_; z‚â§n; s‚â§s) renaming (_‚â§_ to _‚â§‚Ñï_)
open import Data.Nat.Properties using (<·µá‚áí<; +-suc; +-identity ≥; n‚â§1+n; m‚â§m+n) renaming (‚â§-refl to ‚â§‚Ñï-refl; ‚â§-trans to ‚â§‚Ñï-trans)
open import Data.Fin using (Fin; zero; suc; from‚Ñï; from‚Ñï<; inject‚â§)
open import Data.Maybe using (Maybe; nothing; just)
open import Data.Product using (_√ó_; _,_ ; proj‚ÇÅ ; proj‚ÇÇ; Œ£; ‚àÉ-syntax)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Function using (case_of_; const; _‚àò_)
open import Relation.Nullary using (¬¨_; contradiction)
open import Relation.Nullary.Decidable using (Dec; yes; no)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; sym; trans; subst; cong; cong‚ÇÇ; dcong)

{-
** The problem

If we pass stack arguments to a heap closure, then we need to ensure that the
callers' stack does not get corrupted. Corruption can only happen in the presence of
references.

As an example, suppose we pass a stack reference r which contains another stack reference.
That is r : ref 2 (ref 2 Int). On the local stack, we allocate a new reference as in
x = ref 2 (42)
and overwrite the content of r with it
r := x
Now the callers' stack contains a reference to the current stackframe, which becomes
invalid after return from the heap closure (as this return pops the stack).

** Design alternatives

1. Disallow passing stack references to heap closures.
   A well-formedness constraint on function types can help: if the function is heap, then its arguments and results must be heap, too.

2. If we pass a stack reference to a heap function, then it should not be written to.
   To this end, we might introduce a type of read-only references as a supertype of read-write references such that ref 2 T <: roref 2 T' where T' is a read-only supertype of T.
   Writing to a stack reference could happen indirectly via a stack closure, so we'd have to have a simple effect that all writeable references are on the heap.

   (on the other hand, references to primitive type are ok as we cannot introduce backpointers through this avenue.)

** Here we choose option 1.

-}


--

Ident = String
Address = ‚Ñï

open import Qualifiers
open import Auxiliary

-- well-formed types

--! QType {
data Type (q : Qual) : Set
record QType : Set where
  inductive
  constructor mkQ
  field
    q-of  : Qual
    t-of  : Type q-of
open QType public

data Type q where
  Unit  : Type q
  Base  : Type q
  Fun   : (S‚ÇÅ : QType) ‚Üí (S‚ÇÇ : QType)
        ‚Üí q-of S‚ÇÅ ‚â§ q ‚Üí q-of S‚ÇÇ ‚â§ q ‚Üí Type q
  Ref   : (S : QType) ‚Üí q-of S ‚â§ q ‚Üí Type q

syntax mkQ q t = t ^ q
--! }

-- variables
--! Variables
record Var : Set where
  constructor X
  field
    ident : Ident
    q-var : Qual
open Var public

x‚â¢‚áís‚â¢ : ‚àÄ {s s‚Ä≤ : Ident}{q : Qual} ‚Üí X s q ‚â¢ X s‚Ä≤ q ‚Üí s ‚â¢ s‚Ä≤
x‚â¢‚áís‚â¢ xneq refl = xneq refl

-- expressions
--! Expr
data Expr  : Set where
  unit     : Expr
  cst      : ‚Ñï ‚Üí Expr
  var      : Var ‚Üí Expr
  lam      : Qual ‚Üí Var ‚Üí Expr ‚Üí Qual ‚Üí Expr
  app      : Expr ‚Üí Expr ‚Üí Expr
  seq      : Expr ‚Üí Expr ‚Üí Expr
  ref      : Qual ‚Üí Expr ‚Üí Expr
  deref    : Expr ‚Üí Expr
  setref   : Expr ‚Üí Expr ‚Üí Expr

-- values and run-time environments
--! Values {
data Val   : Set
record Stack : Set
data Env   : Set where
  ‚àÖ        : Env
  ‚ü®_‚âî_,_‚ü©  : Ident ‚Üí Val ‚Üí Env ‚Üí Env
  ‚ü®_‚áí_,_‚ü©  : Ident ‚Üí Address ‚Üí Env ‚Üí Env

data Val where
  unit  : Val
  cst   : ‚Ñï ‚Üí Val
  clos  : (q : Qual) (ùìî : Env) (ùì¢ : Stack) (x : Var) (e : Expr)
         (q·µ£ : Qual) ‚Üí Val
  ref   : (q : Qual) (‚Ñì : Address) ‚Üí Val

record Stack where
  inductive; constructor mkS
  field
    vars  : List Val
    refs  : List Val

Heap = List Val
--! }
open Stack public

data _‚àã_‚áí_ : Env ‚Üí Var ‚Üí Address ‚Üí Set where

  here   : ‚àÄ {ùìî}{s}{i} ‚Üí ‚ü® s ‚áí i , ùìî ‚ü© ‚àã X s ùüö ‚áí i
  there  : ‚àÄ {ùìî}{x}{i}{s}{j} ‚Üí ùìî ‚àã x ‚áí i ‚Üí ‚ü® s ‚áí j , ùìî ‚ü© ‚àã x ‚áí i
  skip   : ‚àÄ {ùìî}{x}{i}{s}{v} ‚Üí ùìî ‚àã x ‚áí i ‚Üí ‚ü® s ‚âî v , ùìî ‚ü© ‚àã x ‚áí i

clos-stack-env : Val ‚Üí Maybe (Env √ó Stack)
clos-stack-env unit = nothing
clos-stack-env (cst x) = nothing
clos-stack-env (clos q ùìî ùì¢ x e x‚ÇÅ) = just (ùìî , ùì¢)
clos-stack-env (ref q ‚Ñì) = nothing

variable
  ùìî ùìî‚Ä≤ : Env
  ùìó ùìó‚Ä≤ ùìó‚Ä≥ ùìó‚Ä¥ : Heap
  ùì¢ ùì¢‚Ä≤ ùì¢‚Ä≥ ùì¢‚Ä¥ ùì¢‚Åó ùì¢‚ÇÅ ùì¢‚ÇÇ ùì¢‚ÇÉ ùì¢·∂ú : Stack
  ùìõ : List (List Val)
  s s‚Ä≤ : Ident
  v v‚Ä≤ v‚Ä≥ v‚ÇÄ v‚ÇÅ v‚ÇÇ : Val
  vs vs‚Ä≤ : List Val
  x x‚Ä≤ : Var
  e e‚ÇÅ e‚ÇÇ e‚Ä≤ : Expr
  n ‚Ñì : ‚Ñï

-- push an argument on the stack

push : Stack ‚Üí Val ‚Üí Stack
push (mkS vars refs) v = mkS (vars ++ [ v ]) refs

push-refs-‚â° : push ùì¢ v .refs ‚â° ùì¢ .refs
push-refs-‚â° = refl

-- allocate a reference on the stack

push-refs : Stack ‚Üí List Val ‚Üí Stack
push-refs (mkS vv rr) vs = mkS vv (rr ++ vs)

salloc : Stack ‚Üí Val ‚Üí Stack √ó ‚Ñï
salloc (mkS vars‚ÇÅ refs‚ÇÅ) v = mkS vars‚ÇÅ (refs‚ÇÅ ++ [ v ]) , length refs‚ÇÅ


ùì¢‚àÖ : Stack
ùì¢‚àÖ = mkS [] []

--! StackExtension
_‚âº‚Çõ_ : Stack ‚Üí Stack ‚Üí Set
ùì¢‚ÇÅ ‚âº‚Çõ ùì¢‚ÇÇ = ùì¢‚ÇÅ .vars ‚âº ùì¢‚ÇÇ .vars
          √ó length (ùì¢‚ÇÅ .refs) ‚â§‚Ñï length (ùì¢‚ÇÇ .refs)

‚âº‚Çõ-bot : (ùì¢ : Stack) ‚Üí ùì¢‚àÖ ‚âº‚Çõ ùì¢
‚âº‚Çõ-bot ùì¢ = (ùì¢ .vars , refl) , z‚â§n

‚âº‚Çõ-refl : ùì¢ ‚âº‚Çõ ùì¢
‚âº‚Çõ-refl = ([] , (++-identity ≥ _)) , ‚â§‚Ñï-refl

‚âº‚Çõ-trans : ùì¢‚ÇÅ ‚âº‚Çõ ùì¢‚ÇÇ ‚Üí ùì¢‚ÇÇ ‚âº‚Çõ ùì¢‚ÇÉ ‚Üí ùì¢‚ÇÅ ‚âº‚Çõ ùì¢‚ÇÉ
‚âº‚Çõ-trans ((vs , refl) , ‚â§-12) ((vs‚ÇÅ , refl) , ‚â§-23) = ((vs ++ vs‚ÇÅ) , (sym (++-assoc _ vs vs‚ÇÅ))) , ‚â§‚Ñï-trans ‚â§-12 ‚â§-23

‚âº‚Çõ-push : ùì¢ ‚âº‚Çõ push ùì¢ v
‚âº‚Çõ-push {ùì¢ = ùì¢}{v = v} = ([ v ] , refl) , ‚â§‚Ñï-refl

‚âº‚Çõ-salloc : ùì¢ ‚âº‚Çõ salloc ùì¢ v .proj‚ÇÅ
‚âº‚Çõ-salloc {ùì¢ = ùì¢} = ([] , (++-identity ≥ _)) , ‚â§‚Ñï-trans (m‚â§m+n _ 1) (‚â°‚áí‚â§ (sym (length-++ (ùì¢ .refs))))

‚âº‚Çõ-extend : ‚àÄ vs ‚Üí ùì¢ ‚âº‚Çõ mkS (ùì¢ .vars) (ùì¢ .refs ++ vs)
‚âº‚Çõ-extend {ùì¢} vs = ([] , ++-identity ≥ _) , (‚â§‚Ñï-trans (m‚â§m+n _ (length vs)) (‚â°‚áí‚â§ (sym (length-++ (ùì¢ .refs)))))

-- typing

--! Contexts
data Ctx : Set where
  ‚àÖ         : Ctx
  _,_‚¶Ç_[_]  :  (Œì : Ctx) (x : Var) (S : QType)
               (S‚â°x : q-of S ‚â° q-var x) ‚Üí Ctx

variable
  Œì Œì‚Ä≤ Œì‚Ä≥ Œì‚Ä¥ : Ctx
  T T‚ÇÅ T‚ÇÇ : Type q
  S S‚Ä≤ S‚ÇÄ S‚ÇÅ S‚ÇÇ S‚ÇÉ S‚ÇÑ : QType

--! ContextLookup
data _‚àã_‚¶Ç_ : Ctx ‚Üí Var ‚Üí QType ‚Üí Set where
  here   : ‚àÄ {S‚â°x} ‚Üí (Œì , x ‚¶Ç S [ S‚â°x ]) ‚àã x ‚¶Ç S
  there  : ‚àÄ {S‚â°x} ‚Üí Œì ‚àã x ‚¶Ç S ‚Üí x ‚â¢ x‚Ä≤
         ‚Üí (Œì , x‚Ä≤ ‚¶Ç S‚Ä≤ [ S‚â°x ]) ‚àã x ‚¶Ç S


-- lower bounds for qualifiers

q-val : Val ‚Üí Qual
q-val unit = ùüô
q-val (clos q _ _ _ _ _) = q
q-val (cst x) = ùüô
q-val (ref q _) = q


module _ (q : Qual) where

  data q-Bound : Ctx ‚Üí Set where

    qb-‚àÖ : q-Bound ‚àÖ

    qb-add : ‚àÄ {S‚â°x} ‚Üí q-of S ‚â§ q ‚Üí q-Bound Œì ‚Üí q-Bound (Œì , x ‚¶Ç S [ S‚â°x ])

  data q-Bounded : Ctx ‚Üí Ctx ‚Üí Set where

    qb-‚àÖ : q-Bounded ‚àÖ ‚àÖ

    qb-keep : ‚àÄ {S‚â°x} ‚Üí q-of S ‚â§ q ‚Üí q-Bounded Œì Œì‚Ä≤ ‚Üí q-Bounded (Œì , x ‚¶Ç S [ S‚â°x ]) (Œì‚Ä≤ , x ‚¶Ç S [ S‚â°x ])

    qb-drop : ‚àÄ {S‚â°x} ‚Üí q-Bounded Œì Œì‚Ä≤ ‚Üí (‚àÄ {x‚Ä≤} {S‚Ä≤} ‚Üí Œì‚Ä≤ ‚àã x‚Ä≤ ‚¶Ç S‚Ä≤ ‚Üí x‚Ä≤ ‚â¢ x)  ‚Üí q-Bounded (Œì , x ‚¶Ç S [ S‚â°x ]) (Œì‚Ä≤)


  data q-Bounded-Env : Env ‚Üí Env ‚Üí Set where

    qbe-‚àÖ : q-Bounded-Env ‚àÖ ‚àÖ

    qbe-keep : q-Bounded-Env ùìî ùìî‚Ä≤ ‚Üí q-Bounded-Env ‚ü® s ‚âî v , ùìî ‚ü© ‚ü® s ‚âî v , ùìî‚Ä≤ ‚ü©

    qbe-drop : ‚àÄ {a} ‚Üí q-Bounded-Env ùìî ùìî‚Ä≤ ‚Üí q-Bounded-Env ‚ü® s ‚áí a , ùìî ‚ü© (case q of Œª { ùüô ‚Üí ùìî‚Ä≤ ; ùüö ‚Üí ‚ü® s ‚áí a , ùìî‚Ä≤ ‚ü© })


is-bounded : q-Bounded q Œì Œì‚Ä≤ ‚Üí q-Bound q Œì‚Ä≤
is-bounded qb-‚àÖ = qb-‚àÖ
is-bounded (qb-keep x qbdd) = qb-add x (is-bounded qbdd)
is-bounded (qb-drop qbdd _) = is-bounded qbdd

ùüö-bounded-env : q-Bounded-Env ùüö ùìî ùìî‚Ä≤ ‚Üí ùìî ‚â° ùìî‚Ä≤
ùüö-bounded-env qbe-‚àÖ = refl
ùüö-bounded-env (qbe-keep qbe) = trans ((cong‚ÇÇ ‚ü®_‚âî_, _ ‚ü©) refl refl) ((cong ‚ü® _ ‚âî _ ,_‚ü©) (ùüö-bounded-env qbe))
ùüö-bounded-env (qbe-drop qbe) = trans ((cong‚ÇÇ ‚ü®_‚áí_, _ ‚ü©) refl refl) ((cong ‚ü® _ ‚áí _ ,_‚ü©) (ùüö-bounded-env qbe))


ùüô-bound‚áí‚àÄùüö‚àâ : q-Bound ùüô Œì ‚Üí (‚àÄ s S ‚Üí ¬¨ (Œì ‚àã X s ùüö ‚¶Ç S))
ùüô-bound‚áí‚àÄùüö‚àâ qb-‚àÖ s S ()
ùüô-bound‚áí‚àÄùüö‚àâ (qb-add {S‚â°x = ()} ‚â§-refl qbd) s S here
ùüô-bound‚áí‚àÄùüö‚àâ (qb-add x qbd) s S (there x‚àà x‚ÇÅ) = ùüô-bound‚áí‚àÄùüö‚àâ qbd s S x‚àà

--! SubtypingRelation {
data _<‚¶Ç‚Ä≤_ {q‚ÇÅ q‚ÇÇ : Qual} {qsub : q‚ÇÅ ‚â§ q‚ÇÇ}
           : Type q‚ÇÅ ‚Üí Type q‚ÇÇ ‚Üí Set

data _<‚¶Ç_ : QType ‚Üí QType ‚Üí Set where

  SQual  : (qsub : q‚ÇÅ ‚â§ q‚ÇÇ)
         ‚Üí _<‚¶Ç‚Ä≤_ {qsub = qsub} T‚ÇÅ  T‚ÇÇ
         ‚Üí (T‚ÇÅ ^ q‚ÇÅ) <‚¶Ç (T‚ÇÇ ^ q‚ÇÇ)

data _<‚¶Ç‚Ä≤_ {q‚ÇÅ q‚ÇÇ qsub} where

  SUnit  : Unit <‚¶Ç‚Ä≤ Unit

  SBase  : Base <‚¶Ç‚Ä≤ Base

  SFun   : ‚àÄ {cq‚ÇÅ cq‚ÇÇ cq‚ÇÉ cq‚ÇÑ}
         ‚Üí S‚ÇÉ <‚¶Ç S‚ÇÅ
         ‚Üí S‚ÇÇ <‚¶Ç S‚ÇÑ
         ‚Üí Fun S‚ÇÅ S‚ÇÇ cq‚ÇÅ cq‚ÇÇ <‚¶Ç‚Ä≤ Fun S‚ÇÉ S‚ÇÑ cq‚ÇÉ cq‚ÇÑ

  SRef   : ‚àÄ {cq‚ÇÅ cq‚ÇÇ}
         ‚Üí S‚ÇÅ <‚¶Ç S‚ÇÇ
         ‚Üí S‚ÇÇ <‚¶Ç S‚ÇÅ
         ‚Üí Ref S‚ÇÅ cq‚ÇÅ <‚¶Ç‚Ä≤ Ref S‚ÇÇ cq‚ÇÇ
--! }

q-of-mono : S‚ÇÅ <‚¶Ç S‚ÇÇ ‚Üí q-of S‚ÇÅ ‚â§ q-of S‚ÇÇ
q-of-mono (SQual q1‚â§q2 _) = q1‚â§q2


<‚¶Ç-refl : S <‚¶Ç S
<‚¶Ç‚Ä≤-refl : ‚àÄ {T : Type q} ‚Üí _<‚¶Ç‚Ä≤_ {qsub = ‚â§-refl} T  T

<‚¶Ç-refl {mkQ q T} = SQual ‚â§-refl <‚¶Ç‚Ä≤-refl

<‚¶Ç‚Ä≤-refl {T = Unit} = SUnit
<‚¶Ç‚Ä≤-refl {T = Base} = SBase
<‚¶Ç‚Ä≤-refl {T = Fun S‚ÇÅ S‚ÇÇ cq‚ÇÅ cq‚ÇÇ} = SFun <‚¶Ç-refl <‚¶Ç-refl
<‚¶Ç‚Ä≤-refl {T = Ref S x} = SRef <‚¶Ç-refl <‚¶Ç-refl

<‚¶Ç-trans : S‚ÇÅ <‚¶Ç S‚ÇÇ ‚Üí S‚ÇÇ <‚¶Ç S‚ÇÉ ‚Üí S‚ÇÅ <‚¶Ç S‚ÇÉ
<‚¶Ç‚Ä≤-trans : ‚àÄ {T‚ÇÅ : Type q‚ÇÅ}{T‚ÇÇ : Type q‚ÇÇ}{T‚ÇÉ : Type q‚ÇÉ}{qsub‚ÇÅ : q‚ÇÅ ‚â§ q‚ÇÇ}{qsub‚ÇÇ : q‚ÇÇ ‚â§ q‚ÇÉ}
  ‚Üí _<‚¶Ç‚Ä≤_ {qsub = qsub‚ÇÅ} T‚ÇÅ T‚ÇÇ ‚Üí _<‚¶Ç‚Ä≤_ {qsub = qsub‚ÇÇ} T‚ÇÇ T‚ÇÉ ‚Üí _<‚¶Ç‚Ä≤_ {qsub = ‚â§-trans qsub‚ÇÅ qsub‚ÇÇ} T‚ÇÅ T‚ÇÉ

<‚¶Ç-trans (SQual qsub T‚ÇÅ<‚¶ÇT‚ÇÇ) (SQual qsub‚ÇÅ T‚ÇÇ<‚¶ÇT‚ÇÉ) = SQual (‚â§-trans qsub qsub‚ÇÅ) (<‚¶Ç‚Ä≤-trans T‚ÇÅ<‚¶ÇT‚ÇÇ T‚ÇÇ<‚¶ÇT‚ÇÉ)

<‚¶Ç‚Ä≤-trans (SUnit) (SUnit) = SUnit
<‚¶Ç‚Ä≤-trans (SBase) (SBase) = SBase
<‚¶Ç‚Ä≤-trans (SFun <‚¶Ç-arg‚ÇÅ <‚¶Ç-res‚ÇÅ) (SFun <‚¶Ç-arg‚ÇÇ <‚¶Ç-res‚ÇÇ) = SFun (<‚¶Ç-trans <‚¶Ç-arg‚ÇÇ <‚¶Ç-arg‚ÇÅ) (<‚¶Ç-trans <‚¶Ç-res‚ÇÅ <‚¶Ç-res‚ÇÇ)
<‚¶Ç‚Ä≤-trans (SRef S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÇ<‚¶ÇS‚ÇÅ) (SRef S‚ÇÇ<‚¶ÇS‚ÇÉ S‚ÇÉ<‚¶ÇS‚ÇÇ) = SRef (<‚¶Ç-trans S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÇ<‚¶ÇS‚ÇÉ) (<‚¶Ç-trans S‚ÇÉ<‚¶ÇS‚ÇÇ S‚ÇÇ<‚¶ÇS‚ÇÅ)

<‚¶Ç-antisym : S‚ÇÅ <‚¶Ç S‚ÇÇ ‚Üí S‚ÇÇ <‚¶Ç S‚ÇÅ ‚Üí S‚ÇÅ ‚â° S‚ÇÇ
<‚¶Ç‚Ä≤-antisym : ‚àÄ {T‚ÇÅ T‚ÇÇ : Type q} ‚Üí _<‚¶Ç‚Ä≤_ {qsub = ‚â§-refl} T‚ÇÅ T‚ÇÇ ‚Üí _<‚¶Ç‚Ä≤_ {qsub = ‚â§-refl} T‚ÇÇ T‚ÇÅ ‚Üí T‚ÇÅ ‚â° T‚ÇÇ

<‚¶Ç-antisym (SQual qsub T‚ÇÅ<‚¶ÇT‚ÇÇ) (SQual qsub‚ÇÅ T‚ÇÇ<‚¶ÇT‚ÇÅ)
  with ‚â§-antisym qsub qsub‚ÇÅ
<‚¶Ç-antisym (SQual ‚â§-refl T‚ÇÅ<‚¶ÇT‚ÇÇ) (SQual ‚â§-refl T‚ÇÇ<‚¶ÇT‚ÇÅ) | refl
  = cong (mkQ _) (<‚¶Ç‚Ä≤-antisym T‚ÇÅ<‚¶ÇT‚ÇÇ T‚ÇÇ<‚¶ÇT‚ÇÅ)

<‚¶Ç‚Ä≤-antisym (SUnit) (SUnit) = refl
<‚¶Ç‚Ä≤-antisym (SBase) (SBase) = refl
<‚¶Ç‚Ä≤-antisym (SFun S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÅ<‚¶ÇS‚ÇÉ) (SFun S‚ÇÇ<‚¶ÇS‚ÇÅ S‚ÇÇ<‚¶ÇS‚ÇÇ)
  with refl ‚Üê <‚¶Ç-antisym S‚ÇÇ<‚¶ÇS‚ÇÅ S‚ÇÅ<‚¶ÇS‚ÇÇ
  with refl ‚Üê <‚¶Ç-antisym S‚ÇÅ<‚¶ÇS‚ÇÉ S‚ÇÇ<‚¶ÇS‚ÇÇ
  = cong‚ÇÇ (Fun _ _) ‚â§-irrelevant ‚â§-irrelevant
<‚¶Ç‚Ä≤-antisym (SRef S‚ÇÅ<‚¶ÇS‚ÇÇ _) (SRef  S‚ÇÇ<‚¶ÇS‚ÇÅ _)
  with refl ‚Üê <‚¶Ç-antisym S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÇ<‚¶ÇS‚ÇÅ
  = cong (Ref _) ‚â§-irrelevant


-- typing

--! TypingRules {
data _‚ä¢_‚¶Ç_ : Ctx ‚Üí Expr ‚Üí QType ‚Üí Set where

  TUnit    : Œì ‚ä¢ unit ‚¶Ç (Unit ^ q)

  TBase    : Œì ‚ä¢ cst n ‚¶Ç (Base ^ q)

  TVar     : Œì ‚àã x ‚¶Ç S
           ‚Üí Œì ‚ä¢ var x ‚¶Ç S

  TAbs     : ‚àÄ {S‚â°x}
           ‚Üí (Œì‚Ä≤ , x ‚¶Ç S‚ÇÅ [ S‚â°x ]) ‚ä¢ e ‚¶Ç S‚ÇÇ
           ‚Üí q-Bounded q Œì Œì‚Ä≤
           ‚Üí let q‚ÇÅ = q-of S‚ÇÅ; q‚ÇÇ = q-of S‚ÇÇ
           in {cq‚ÇÅ : q‚ÇÅ ‚â§ q}
           ‚Üí {cq‚ÇÇ : q‚ÇÇ ‚â§ q}
           ‚Üí Œì ‚ä¢ lam q x e q‚ÇÇ ‚¶Ç (Fun S‚ÇÅ S‚ÇÇ cq‚ÇÅ cq‚ÇÇ ^ q)

  TApp     : ‚àÄ {cq‚ÇÅ cq‚ÇÇ}
           ‚Üí Œì ‚ä¢ e‚ÇÅ ‚¶Ç (Fun S‚ÇÅ S‚ÇÇ cq‚ÇÅ cq‚ÇÇ ^ ùüö)
           ‚Üí Œì ‚ä¢ e‚ÇÇ ‚¶Ç S‚ÇÅ
           ‚Üí Œì ‚ä¢ app e‚ÇÅ e‚ÇÇ ‚¶Ç S‚ÇÇ

  TSub     : Œì ‚ä¢ e ‚¶Ç S
           ‚Üí S <‚¶Ç S‚Ä≤
           ‚Üí Œì ‚ä¢ e ‚¶Ç S‚Ä≤

  TSeq     : Œì ‚ä¢ e‚ÇÅ ‚¶Ç (Unit ^ ùüö)
           ‚Üí Œì ‚ä¢ e‚ÇÇ ‚¶Ç S
           ‚Üí Œì ‚ä¢ seq e‚ÇÅ e‚ÇÇ ‚¶Ç S

  TRef     : ‚àÄ {cq : q-of S ‚â§ q}
           ‚Üí Œì ‚ä¢ e ‚¶Ç S
           ‚Üí Œì ‚ä¢ ref q e ‚¶Ç (Ref S cq ^ q)

  TDeref   : ‚àÄ {cq : q-of S ‚â§ q}
           ‚Üí Œì ‚ä¢ e ‚¶Ç (Ref S cq ^ q)
           ‚Üí Œì ‚ä¢ deref e ‚¶Ç S

  TSetref  : ‚àÄ {cq : q-of S ‚â§ q}
           ‚Üí Œì ‚ä¢ e‚ÇÅ ‚¶Ç (Ref S cq ^ q)
           ‚Üí Œì ‚ä¢ e‚ÇÇ ‚¶Ç S
           ‚Üí Œì ‚ä¢ setref e‚ÇÅ e‚ÇÇ ‚¶Ç (Unit ^ ùüô)
--! }


-- heap & stack typing

_‚Üì‚Ä≤_ : List Val ‚Üí ‚Ñï ‚Üí Maybe Val
[] ‚Üì‚Ä≤ i = nothing
(x ‚à∑ xs) ‚Üì‚Ä≤ zero = just x
(x ‚à∑ xs) ‚Üì‚Ä≤ (suc i) = xs ‚Üì‚Ä≤ i

‚Üì‚Ä≤-[] : (i : ‚Ñï) ‚Üí [] ‚Üì‚Ä≤ i ‚â° nothing
‚Üì‚Ä≤-[] i = refl

_‚Üì·µ•_ : Stack ‚Üí ‚Ñï ‚Üí Maybe Val
ùì¢ ‚Üì·µ• i = ùì¢ .vars ‚Üì‚Ä≤ i

_‚Üì·µ£_ : Stack ‚Üí ‚Ñï ‚Üí Maybe Val
ùì¢ ‚Üì·µ£ i = ùì¢ .refs ‚Üì‚Ä≤ i

‚Üì‚Ä≤-mono : ‚àÄ {v} i ‚Üí just v ‚â° vs ‚Üì‚Ä≤ i ‚Üí just v ‚â° (vs ++ vs‚Ä≤) ‚Üì‚Ä≤ i
‚Üì‚Ä≤-mono {x‚ÇÅ ‚à∑ vs} {vs‚Ä≤} {i} zero vs‚Üì‚â° = vs‚Üì‚â°
‚Üì‚Ä≤-mono {x‚ÇÅ ‚à∑ vs} {vs‚Ä≤} {i} (suc x) vs‚Üì‚â° = ‚Üì‚Ä≤-mono {vs} {vs‚Ä≤} {i} x vs‚Üì‚â°

‚Üì·µ•-mono : ‚àÄ {v}{i : ‚Ñï} ‚Üí ùì¢ ‚âº‚Çõ ùì¢‚Ä≤ ‚Üí  just v ‚â° ùì¢ ‚Üì·µ• i ‚Üí just v ‚â° ùì¢‚Ä≤ ‚Üì·µ• i
‚Üì·µ•-mono {ùì¢ = ùì¢} {v = v} {i = i} ((fst , refl) , snd) ùì¢‚Üì‚â° = ‚Üì‚Ä≤-mono {vs = ùì¢ .vars} {v = v} i ùì¢‚Üì‚â°

‚Üì‚Ä≤-last : ‚àÄ vs ‚Üí just v ‚â° (vs ++ [ v ]) ‚Üì‚Ä≤ (length vs)
‚Üì‚Ä≤-last [] = refl
‚Üì‚Ä≤-last (_ ‚à∑ vs) = ‚Üì‚Ä≤-last vs


variable
  a a‚Ä≤  : Address
  va va‚Ä≤ : Val ‚äé Address

-- (H,‚àÖ)(x 1) = v
data Access : Env ‚Üí Var ‚Üí Val ‚Üí Set where

  here   : Access ‚ü® s ‚âî v , ùìî ‚ü© (X s ùüô) v
  there  : Access ùìî x v ‚Üí X s‚Ä≤ ùüô ‚â¢ x ‚Üí Access ‚ü® s‚Ä≤ ‚âî v‚Ä≤ , ùìî ‚ü© x v
  skip   : Access ùìî x v ‚Üí X s‚Ä≤ ùüö ‚â¢ x ‚Üí Access ‚ü® s‚Ä≤ ‚áí a‚Ä≤ , ùìî ‚ü© x v

data StackAccess : Env ‚Üí Var ‚Üí Address ‚Üí Set where

  here   : StackAccess ‚ü® s ‚áí a , ùìî ‚ü© (X s ùüö) a
  there  : StackAccess ùìî x a ‚Üí X s‚Ä≤ ùüö ‚â¢ x ‚Üí StackAccess ‚ü® s‚Ä≤ ‚áí a‚Ä≤ , ùìî ‚ü© x a
  skip   : StackAccess ùìî x a ‚Üí X s‚Ä≤ ùüô ‚â¢ x ‚Üí StackAccess ‚ü® s‚Ä≤ ‚âî v‚Ä≤ , ùìî ‚ü© x a

data GenAccess : Env ‚Üí Var ‚Üí (Val ‚äé Address) ‚Üí Set where

  on-heap   : Access ùìî (X s ùüô) v ‚Üí GenAccess ùìî (X s ùüô) (inj‚ÇÅ v)
  on-stack  : StackAccess ùìî (X s ùüö) a ‚Üí GenAccess ùìî (X s ùüö) (inj‚ÇÇ a)

access-unique : Access ùìî x v ‚Üí Access ùìî x v‚Ä≤ ‚Üí v ‚â° v‚Ä≤
access-unique here here = refl
access-unique here (there acc‚Ä≤ x) = ‚ä•-elim (x refl)
access-unique (there acc x) here = ‚ä•-elim (x refl)
access-unique (there acc x) (there acc‚Ä≤ x‚ÇÅ) = access-unique acc acc‚Ä≤
access-unique (skip acc x) (skip acc‚Ä≤ x‚ÇÅ) = access-unique acc acc‚Ä≤

stack-access-unique : StackAccess ùìî x a ‚Üí StackAccess ùìî x a‚Ä≤ ‚Üí a ‚â° a‚Ä≤
stack-access-unique here here = refl
stack-access-unique here (there sa‚Ä≤ x) = ‚ä•-elim (x refl)
stack-access-unique (there sa x) here = ‚ä•-elim (x refl)
stack-access-unique (there sa x) (there sa‚Ä≤ x‚ÇÅ) = stack-access-unique sa sa‚Ä≤
stack-access-unique (skip sa x) (skip sa‚Ä≤ x‚ÇÅ) = stack-access-unique sa sa‚Ä≤

gen-access-unique : GenAccess ùìî x va ‚Üí GenAccess ùìî x va‚Ä≤ ‚Üí va ‚â° va‚Ä≤
gen-access-unique (on-heap x) (on-heap x‚ÇÅ) = cong inj‚ÇÅ (access-unique x x‚ÇÅ)
gen-access-unique (on-stack x) (on-stack x‚ÇÅ) = cong inj‚ÇÇ (stack-access-unique x x‚ÇÅ)


-- heap and stack types

Typeof : Qual ‚Üí Set
Typeof ùüô = Type ùüô               -- heap types
Typeof ùüö = QType                -- stack types

_^^_ : (q : Qual) ‚Üí Typeof q ‚Üí QType
ùüô ^^ T = T ^ ùüô
ùüö ^^ S = S

q-^^-‚â§ : {S : Typeof q} ‚Üí q-of (q ^^ S) ‚â§ q
q-^^-‚â§ {ùüô} = ‚â§-refl
q-^^-‚â§ {ùüö} = ‚â§-top

HSType = (q : Qual) ‚Üí List (Typeof q)

-- heap type

HType = List (Type ùüô)

-- stack type

SType = List QType

variable
  Œ£‚Çï‚Çõ Œ£‚Çï‚Çõ‚Ä≤ Œ£‚Çï‚Çõ‚Ä≥ : HSType
  Œ£‚Çï Œ£‚Çï‚Ä≤ Œ£‚Çï‚Ä≥ : HType
  Œ£‚Çõ Œ£‚Çõ‚Ä≤ Œ£‚Çõ‚Ä≥ : SType
  Œ£‚Çì Œ£‚Çì‚Ä≤ Œ£‚Çì‚Ä≥ : List (Typeof q)

extend-Œ£ : HSType ‚Üí (q : Qual) ‚Üí Typeof q ‚Üí HSType
extend-Œ£ Œ£‚Çï‚Çõ ùüô T ùüô = Œ£‚Çï‚Çõ ùüô ++ [ T ]
extend-Œ£ Œ£‚Çï‚Çõ ùüô T ùüö = Œ£‚Çï‚Çõ ùüö
extend-Œ£ Œ£‚Çï‚Çõ ùüö T ùüô = Œ£‚Çï‚Çõ ùüô
extend-Œ£ Œ£‚Çï‚Çõ ùüö T ùüö = Œ£‚Çï‚Çõ ùüö ++ [ T ]


adjust-stack : HSType ‚Üí List QType ‚Üí HSType
adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ùüô = Œ£‚Çï‚Çõ ùüô
adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ùüö = Œ£‚Çõ


---- heap/stack typing extension
-- combined h/s typing

_‚âº‚Çï‚Çõ_ : HSType ‚Üí HSType ‚Üí Set
Œ£‚Çï‚Çõ ‚âº‚Çï‚Çõ Œ£‚Çï‚Çõ‚Ä≤ = ‚àÄ q ‚Üí ‚àÉ[ qts ] Œ£‚Çï‚Çõ q ++ qts ‚â°  Œ£‚Çï‚Çõ‚Ä≤ q

‚âº‚Çï‚Çõ-refl : Œ£‚Çï‚Çõ ‚âº‚Çï‚Çõ Œ£‚Çï‚Çõ
‚âº‚Çï‚Çõ-refl {Œ£‚Çï‚Çõ} q = [] , ++-identity ≥ (Œ£‚Çï‚Çõ q)

‚âº‚Çï‚Çõ-trans : Œ£‚Çï‚Çõ ‚âº‚Çï‚Çõ Œ£‚Çï‚Çõ‚Ä≤ ‚Üí  Œ£‚Çï‚Çõ‚Ä≤ ‚âº‚Çï‚Çõ Œ£‚Çï‚Çõ‚Ä≥ ‚Üí  Œ£‚Çï‚Çõ ‚âº‚Çï‚Çõ Œ£‚Çï‚Çõ‚Ä≥
‚âº‚Çï‚Çõ-trans { Œ£‚Çï‚Çõ} Œ£‚âº Œ£‚âº‚Ä≥ q
  with Œ£‚âº q | Œ£‚âº‚Ä≥ q
... | qts1 , eq1 | qts2 , eq2
  rewrite sym eq2 = (qts1 ++ qts2) , trans (sym (++-assoc (Œ£‚Çï‚Çõ q) qts1 qts2)) (cong (_++ qts2) eq1)

‚âº‚Çï‚Çõ-extend-Œ£ : ‚àÄ q‚ÇÅ S‚ÇÅ ‚Üí Œ£‚Çï‚Çõ ‚âº‚Çï‚Çõ extend-Œ£ Œ£‚Çï‚Çõ q‚ÇÅ S‚ÇÅ
‚âº‚Çï‚Çõ-extend-Œ£ ùüô S‚ÇÅ ùüô = [ S‚ÇÅ ] , refl
‚âº‚Çï‚Çõ-extend-Œ£ ùüô S‚ÇÅ ùüö = [] , (++-identity ≥ _)
‚âº‚Çï‚Çõ-extend-Œ£ ùüö S‚ÇÅ ùüô = [] , (++-identity ≥ _)
‚âº‚Çï‚Çõ-extend-Œ£ ùüö S‚ÇÅ ùüö = [ S‚ÇÅ ] , refl

‚âº‚Çï‚Çõ-adjust : ‚àÄ {Œ£‚ÇÅ Œ£‚ÇÇ : HSType} ‚Üí Œ£‚ÇÅ ‚âº‚Çï‚Çõ Œ£‚ÇÇ ‚Üí Œ£‚ÇÅ ‚âº‚Çï‚Çõ adjust-stack Œ£‚ÇÇ (Œ£‚ÇÅ ùüö)
‚âº‚Çï‚Çõ-adjust ‚âºŒ£‚ÇÅ ùüô = ‚âºŒ£‚ÇÅ ùüô
‚âº‚Çï‚Çõ-adjust {Œ£‚ÇÅ} ‚âºŒ£‚ÇÅ ùüö = [] , ++-identity ≥ (Œ£‚ÇÅ ùüö)

-- ‚âº‚Çï‚Çõ-adjust-[] : ‚àÄ {Œ£‚ÇÅ Œ£‚ÇÇ : HSType} ‚Üí adjust-stack Œ£‚ÇÅ [] ‚âº‚Çï‚Çõ Œ£‚ÇÇ ‚Üí Œ£‚ÇÅ ‚âº‚Çï‚Çõ adjust-stack Œ£‚ÇÇ (Œ£‚ÇÅ ùüö)
-- ‚âº‚Çï‚Çõ-adjust-[] ‚âºŒ£‚ÇÅ ùüô = ‚âºŒ£‚ÇÅ ùüô
-- ‚âº‚Çï‚Çõ-adjust-[] {Œ£‚ÇÅ} ‚âºŒ£‚ÇÅ ùüö = [] , ++-identity ≥ (Œ£‚ÇÅ ùüö)

‚âº‚Çï‚Çõ‚áílength : Œ£‚Çï‚Çõ ‚âº‚Çï‚Çõ Œ£‚Çï‚Çõ‚Ä≤ ‚Üí ‚àÄ q ‚Üí length (Œ£‚Çï‚Çõ q) ‚â§‚Ñï length (Œ£‚Çï‚Çõ‚Ä≤ q)
‚âº‚Çï‚Çõ‚áílength {Œ£‚Çï‚Çõ} Œ£‚âº q
  with Œ£‚âº q
... | qts , eq
  with length-‚â§ (Œ£‚Çï‚Çõ q) qts
... | r
  rewrite eq
  = r

‚âº‚Çï‚Çõ-lookup-aux : ‚àÄ {a}{A : Set a} (xs ys zs : List A)
  ‚Üí (eq : xs ++ ys ‚â° zs)
  ‚Üí (i : Fin (length xs))
  ‚Üí lookup (xs ++ ys) (inject‚â§ i (length-‚â§ xs ys)) ‚â° lookup zs (inject‚â§ i (subst (Œª xx ‚Üí length xs ‚â§‚Ñï length xx) eq (length-‚â§ xs ys)))
‚âº‚Çï‚Çõ-lookup-aux xs ys zs refl i = refl

‚âº‚Çï‚Çõ-lookup : (Œ£‚âº : Œ£‚Çï‚Çõ ‚âº‚Çï‚Çõ Œ£‚Çï‚Çõ‚Ä≤) ‚Üí ‚àÄ q ‚Üí (i : Fin (length (Œ£‚Çï‚Çõ q))) ‚Üí lookup (Œ£‚Çï‚Çõ q) i ‚â° lookup (Œ£‚Çï‚Çõ‚Ä≤ q) (inject‚â§ i (‚âº‚Çï‚Çõ‚áílength Œ£‚âº q))
‚âº‚Çï‚Çõ-lookup {Œ£‚Çï‚Çõ = Œ£‚Çï‚Çõ}{Œ£‚Çï‚Çõ‚Ä≤} Œ£‚âº q i
  using qts , eq ‚Üê Œ£‚âº q
  = trans (lookup-++ (Œ£‚Çï‚Çõ q) qts i) (‚âº‚Çï‚Çõ-lookup-aux (Œ£‚Çï‚Çõ q) qts (Œ£‚Çï‚Çõ‚Ä≤ q) eq i)

---- value typing & environment agreement

--! NewFrame
new-frame? : Qual ‚Üí Stack ‚Üí Stack
new-frame? ùüô ùì¢ = ùì¢‚àÖ
new-frame? ùüö ùì¢ = ùì¢

--! Choose
choose : (q : Qual) ‚Üí HType ‚Üí SType ‚Üí List (Typeof q)
choose ùüô Œ£‚Çï Œ£‚Çõ = Œ£‚Çï
choose ùüö Œ£‚Çï Œ£‚Çõ = Œ£‚Çõ

--! ValueTyping {
data ‚ü®_,_‚ü©‚ä¢[_‚¶Ç_] (Œ£‚Çï : HType) (Œ£‚Çõ : SType)
                 : Val ‚Üí QType ‚Üí Set

record ‚ü®_,_,_‚ü©‚ä®_/_ (Œ£‚Çï : HType) (Œ£‚Çõ : SType) (Œì : Ctx)
                   (ùìî : Env) (ùì¢ : Stack) : Set where
  inductive
  constructor mk-‚ä®
  field
    ‚ä®-heap   : ‚àÄ {s}{T} ‚Üí Œì ‚àã X s ùüô ‚¶Ç (T ^ ùüô)
             ‚Üí ‚àÉ[ v ] Access ùìî (X s ùüô) v
                    √ó ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô) ]
    ‚ä®-stack  : ‚àÄ {s}{S} ‚Üí Œì ‚àã X s ùüö ‚¶Ç S
             ‚Üí ‚àÉ[ a ] StackAccess ùìî (X s ùüö) a
                    √ó ‚àÉ[ v ] just v ‚â° (ùì¢ ‚Üì·µ• a)
                    √ó ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]
open ‚ü®_,_,_‚ü©‚ä®_/_ public

-- value typing

data ‚ü®_,_‚ü©‚ä¢[_‚¶Ç_] Œ£‚Çï Œ£‚Çõ where

  TVUnit  : ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ unit ‚¶Ç (Unit ^ q) ]

  TVCst   : ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ cst n ‚¶Ç (Base ^ q) ]

  TVClos  : ‚àÄ {S‚ÇÅ‚â§x}
          ‚Üí (‚àÄ‚ä®ùìî : ‚àÄ ùì¢‚Ä≤ ‚Üí (ùì¢‚âº : ùì¢ ‚âº‚Çõ ùì¢‚Ä≤)
                        ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢‚Ä≤)
          ‚Üí (ùì¢‚â° : ùì¢ ‚â° new-frame? q ùì¢)
          ‚Üí (qbd : q-Bound q Œì)
          ‚Üí (‚ä¢e : (Œì , x ‚¶Ç S‚ÇÅ [ S‚ÇÅ‚â§x ]) ‚ä¢ e ‚¶Ç S‚ÇÇ)
          ‚Üí let q‚ÇÇ = q-of S‚ÇÇ in
          let q‚ÇÅ = q-of S‚ÇÅ
          in (cq‚ÇÅ : q‚ÇÅ ‚â§ q)
          ‚Üí (cq‚ÇÇ : q‚ÇÇ ‚â§ q)
          ‚Üí (<‚¶ÇS : (Fun S‚ÇÅ S‚ÇÇ cq‚ÇÅ cq‚ÇÇ ^ q) <‚¶Ç S)
          ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ clos q ùìî ùì¢ x e q‚ÇÇ ‚¶Ç S ]

  TVRef   : ‚àÄ {T : Typeof q}
          ‚Üí let Œ£·µ£ = choose q Œ£‚Çï Œ£‚Çõ
          in (‚Ñì< : ‚Ñì < length Œ£·µ£)
          ‚Üí (lkup‚â° : lookup Œ£·µ£ (from‚Ñï< ‚Ñì<) ‚â° T)
          ‚Üí (<‚¶ÇS : (Ref (q ^^ T) q-^^-‚â§ ^ q) <‚¶Ç S)
          ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ ref q ‚Ñì ‚¶Ç S ]
--! }

rename-bounded‚Ä≤ : q-Bounded q Œì Œì‚Ä≤ ‚Üí Œì‚Ä≤ ‚àã x ‚¶Ç S ‚Üí Œì ‚àã x ‚¶Ç S
rename-bounded‚Ä≤ (qb-keep x qbdd) (here) = here
rename-bounded‚Ä≤ (qb-keep x qbdd) (there x‚àà x‚â¢) = there (rename-bounded‚Ä≤ qbdd x‚àà) x‚â¢
rename-bounded‚Ä≤ (qb-drop qbdd f) x‚àà = there (rename-bounded‚Ä≤ qbdd x‚àà) (f x‚àà)

restrict‚Ä≤ : ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢ ‚Üí q-Bounded q Œì Œì‚Ä≤ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì‚Ä≤ ‚ü©‚ä® ùìî / new-frame? q ùì¢
restrict‚Ä≤ {q = ùüö} ‚ä®ùìî qbdd =
  mk-‚ä® (Œª x‚àà ‚Üí ‚ä®-heap ‚ä®ùìî (rename-bounded‚Ä≤ qbdd x‚àà))
       (Œª x‚àà ‚Üí ‚ä®-stack ‚ä®ùìî (rename-bounded‚Ä≤ qbdd x‚àà))
restrict‚Ä≤ {q = ùüô} ‚ä®ùìî qbdd =
  mk-‚ä® (Œª x‚àà ‚Üí ‚ä®-heap ‚ä®ùìî (rename-bounded‚Ä≤ qbdd x‚àà))
       (Œª{ x‚àà ‚Üí ‚ä•-elim (ùüô-bound‚áí‚àÄùüö‚àâ (is-bounded qbdd) _ _ x‚àà)})


ùüô-value : ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ] ‚Üí S <‚¶Ç mkQ ùüô T ‚Üí q-val v ‚â° ùüô
ùüô-value TVUnit S<‚¶Ç = refl
ùüô-value TVCst S<‚¶Ç = refl
ùüô-value (TVClos ‚àÄ‚ä®ùìî ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ (SQual ‚â§-refl x‚ÇÅ)) (SQual ‚â§-refl x) = refl
ùüô-value (TVRef ‚Ñì< lkup‚â° (SQual ‚â§-refl x‚ÇÅ)) (SQual ‚â§-refl x) = refl

ùüô-value-no-stack : ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ] ‚Üí q-of S ‚â° ùüô ‚Üí ‚ü® Œ£‚Çï , [] ‚ü©‚ä¢[ v ‚¶Ç S ]
ùüô-env-no-stack : ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢ ‚Üí q-Bound ùüô Œì ‚Üí  ‚ü® Œ£‚Çï , [] , Œì ‚ü©‚ä® ùìî / ùì¢

ùüô-value-no-stack TVUnit qs‚â°ùüô = TVUnit
ùüô-value-no-stack TVCst qs‚â°ùüô = TVCst
ùüô-value-no-stack (TVClos {q = ùüô} ‚àÄ‚ä®ùìî refl qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ (SQual ‚â§-refl x)) refl = TVClos (Œª ùì¢‚Ä≤ ùì¢‚âº ‚Üí ùüô-env-no-stack (‚àÄ‚ä®ùìî ùì¢‚Ä≤ ùì¢‚âº) qbd) refl qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ (SQual ‚â§-refl x)
ùüô-value-no-stack (TVRef {ùüô} ‚Ñì< lkup‚â° <‚¶ÇS) refl = TVRef ‚Ñì< lkup‚â° <‚¶ÇS
ùüô-value-no-stack (TVRef {ùüö} ‚Ñì< lkup‚â° (SQual () x)) refl

ùüô-env-no-stack ‚ä®ùìî qbd = mk-‚ä® (Œª x‚àà ‚Üí let v , acc , ‚ä¢v = ‚ä®-heap ‚ä®ùìî x‚àà in v , acc , ùüô-value-no-stack ‚ä¢v refl)
                             Œª x‚àà ‚Üí contradiction x‚àà (ùüô-bound‚áí‚àÄùüö‚àâ qbd _ _)

‚ä®-adjust-‚âº‚Çõ : ùì¢ ‚âº‚Çõ ùì¢‚Ä≤
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢‚Ä≤

‚ä®-adjust-‚âº‚Çõ {ùì¢ = ùì¢}{ùì¢‚Ä≤ = ùì¢‚Ä≤} ùì¢‚âº‚Çõùì¢‚Ä≤ ‚ä®ùìî =
  mk-‚ä® (Œª x‚àà ‚Üí ‚ä®-heap ‚ä®ùìî x‚àà)
       (Œª x‚àà ‚Üí let a , sa , v , eq , ‚ä¢v = ‚ä®-stack ‚ä®ùìî x‚àà in a , sa , v , (‚Üì·µ•-mono {ùì¢ = ùì¢}{ùì¢‚Ä≤ = ùì¢‚Ä≤} ùì¢‚âº‚Çõùì¢‚Ä≤ eq) , ‚ä¢v)

-- a heap value can be typed with any stack type

‚ä¢·µ•-adjust-ùüô : ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô) ] ‚Üí  ‚ü® Œ£‚Çï , Œ£‚Çõ‚Ä≤ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô) ]
‚ä®-adjust-ùüô : q-Bound ùüô Œì ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢‚Ä≤ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ‚Ä≤ , Œì ‚ü©‚ä® ùìî / ùì¢‚Ä≤

‚ä¢·µ•-adjust-ùüô TVUnit = TVUnit
‚ä¢·µ•-adjust-ùüô TVCst = TVCst
‚ä¢·µ•-adjust-ùüô (TVClos {q = ùüô} ‚àÄ‚ä®ùìî ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ <‚¶ÇS) = TVClos (Œª ùì¢‚Ä≤ ùì¢‚âº ‚Üí ‚ä®-adjust-ùüô qbd (‚àÄ‚ä®ùìî ùì¢‚Ä≤ ùì¢‚âº)) ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ <‚¶ÇS
‚ä¢·µ•-adjust-ùüô (TVClos {q = ùüö} ‚àÄ‚ä®ùìî ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ (SQual () x))
‚ä¢·µ•-adjust-ùüô (TVRef {ùüô} ‚Ñì< lkup‚â° <‚¶ÇS) = TVRef ‚Ñì< lkup‚â° <‚¶ÇS
‚ä¢·µ•-adjust-ùüô (TVRef {ùüö} ‚Ñì< lkup‚â° (SQual () x))

‚ä®-adjust-ùüô qbd ‚ä®ùìî = mk-‚ä® (Œª x‚àà ‚Üí let v , acc , ‚ä¢v = ‚ä®-heap ‚ä®ùìî x‚àà in v , acc , ‚ä¢·µ•-adjust-ùüô ‚ä¢v)
                         (Œª {s} {S} x‚àà ‚Üí contradiction x‚àà (ùüô-bound‚áí‚àÄùüö‚àâ qbd s S))


-- extension for value types and agreement

‚ä®-extend : Œ£‚Çï ‚âº Œ£‚Çï‚Ä≤ ‚Üí Œ£‚Çõ ‚âº Œ£‚Çõ‚Ä≤ ‚Üí ùì¢ ‚âº‚Çõ ùì¢‚Ä≤ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢ ‚Üí ‚ü® Œ£‚Çï‚Ä≤ , Œ£‚Çõ‚Ä≤ , Œì ‚ü©‚ä® ùìî / ùì¢‚Ä≤
‚ä¢·µ•-extend : Œ£‚Çï ‚âº Œ£‚Çï‚Ä≤ ‚Üí Œ£‚Çõ ‚âº Œ£‚Çõ‚Ä≤ ‚Üí ùì¢ ‚âº‚Çõ ùì¢‚Ä≤ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ] ‚Üí ‚ü® Œ£‚Çï‚Ä≤ , Œ£‚Çõ‚Ä≤ ‚ü©‚ä¢[ v ‚¶Ç S ]

‚ä®-extend {ùì¢ = ùì¢}{ùì¢‚Ä≤ = ùì¢‚Ä≤} ‚âºŒ£‚Çï ‚âºŒ£‚Çõ ‚âºùì¢ ‚ä®ùìî = mk-‚ä® (Œª x ‚Üí let v , acc , ‚ä¢v = ‚ä®-heap ‚ä®ùìî x in v , acc , ‚ä¢·µ•-extend {ùì¢ = ùì¢}{ùì¢‚Ä≤ = ùì¢‚Ä≤} ‚âºŒ£‚Çï ‚âºŒ£‚Çõ ‚âºùì¢ ‚ä¢v)
                         (Œª x ‚Üí let a , sacc , v , jv‚â° , ‚ä¢v = ‚ä®-stack ‚ä®ùìî x in a , sacc , v , ‚Üì·µ•-mono{ùì¢ = ùì¢}{ùì¢‚Ä≤ = ùì¢‚Ä≤} ‚âºùì¢ jv‚â° , ‚ä¢·µ•-extend {ùì¢ = ùì¢}{ùì¢‚Ä≤ = ùì¢‚Ä≤} ‚âºŒ£‚Çï ‚âºŒ£‚Çõ ‚âºùì¢ ‚ä¢v)
‚ä¢·µ•-extend ‚âºŒ£‚Çï ‚âºŒ£‚Çõ ‚âºùì¢ TVUnit = TVUnit
‚ä¢·µ•-extend ‚âºŒ£‚Çï ‚âºŒ£‚Çõ ‚âºùì¢ TVCst = TVCst
‚ä¢·µ•-extend ‚âºŒ£‚Çï ‚âºŒ£‚Çõ ‚âºùì¢ (TVClos ‚àÄ‚ä®ùìî ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ <‚¶ÇS)
  = TVClos (Œª ùì¢‚Ä≤‚ÇÅ ùì¢‚âº ‚Üí ‚ä®-extend {ùì¢ = ùì¢‚Ä≤‚ÇÅ} ‚âºŒ£‚Çï ‚âºŒ£‚Çõ (‚âº‚Çõ-refl {ùì¢‚Ä≤‚ÇÅ}) (‚àÄ‚ä®ùìî _ ùì¢‚âº)) ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ <‚¶ÇS
‚ä¢·µ•-extend {Œ£‚Çï = Œ£‚Çï} {Œ£‚Çõ = Œ£‚Çõ} ‚âºŒ£‚Çï@(qts , eq) ‚âºŒ£‚Çõ ‚âºùì¢ (TVRef {q = ùüô} ‚Ñì< lkup‚â° <‚¶ÇS) = TVRef (‚â§‚Ñï-trans ‚Ñì< (‚âº‚áílength ‚âºŒ£‚Çï)) (trans (lookup-from-i‚Ä≤ Œ£‚Çï ‚Ñì< eq) lkup‚â°) <‚¶ÇS
‚ä¢·µ•-extend {Œ£‚Çï = Œ£‚Çï} {Œ£‚Çõ = Œ£‚Çõ} ‚âºŒ£‚Çï ‚âºŒ£‚Çõ@(qts , eq) ‚âºùì¢ (TVRef {q = ùüö} ‚Ñì< lkup‚â° <‚¶ÇS) = TVRef (‚â§‚Ñï-trans ‚Ñì< (‚âº‚áílength ‚âºŒ£‚Çõ)) (trans (lookup-from-i‚Ä≤ Œ£‚Çõ ‚Ñì< eq) lkup‚â°) <‚¶ÇS



-- heap typing


--! HeapTyping {
_‚ä¢[_‚¶Ç_] : HType ‚Üí Val ‚Üí Type ùüô ‚Üí Set
Œ£‚Çï ‚ä¢[ v ‚¶Ç T ] = ‚ü® Œ£‚Çï , [] ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô)]

_‚ä¢‚Çï_ : HType ‚Üí Heap ‚Üí Set
Œ£‚Çï ‚ä¢‚Çï ùìó = Pointwise (Œ£‚Çï ‚ä¢[_‚¶Ç_]) ùìó Œ£‚Çï
--! }

‚ä¢‚Çï-length-aux : ‚àÄ {q} {Œ£·µ£} {vs : List Val} ‚Üí Pointwise (Œª x y ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ x ‚¶Ç (q ^^ y) ]) vs Œ£·µ£ ‚Üí length Œ£·µ£ ‚â° length vs
‚ä¢‚Çï-length-aux [] = refl
‚ä¢‚Çï-length-aux (x‚àºy ‚à∑ pws) = cong suc (‚ä¢‚Çï-length-aux pws)

‚ä¢‚Çï-length : Œ£‚Çï ‚ä¢‚Çï ùìó ‚Üí length Œ£‚Çï ‚â° length ùìó
‚ä¢‚Çï-length ‚ä¢ùìó = ‚ä¢‚Çï-length-aux ‚ä¢ùìó




-- stack typing

--! StackTyping
_,_‚ä¢‚Çõ_ : HType ‚Üí SType ‚Üí Stack ‚Üí Set
Œ£‚Çï , Œ£‚Çõ ‚ä¢‚Çõ ùì¢ = Pointwise ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[_‚¶Ç_] (ùì¢ .refs) Œ£‚Çõ

‚ä¢‚Çõ-length : Œ£‚Çï , Œ£‚Çõ ‚ä¢‚Çõ ùì¢ ‚Üí length Œ£‚Çõ ‚â° length (ùì¢ .refs)
‚ä¢‚Çõ-length ‚ä¢ùì¢ = ‚ä¢‚Çï-length-aux ‚ä¢ùì¢


‚ä®-adjust-‚âº‚Çï :
  Œ£‚Çï ‚âº Œ£‚Çï‚Ä≤
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢
  ‚Üí ‚ü® Œ£‚Çï‚Ä≤ , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢

‚ä¢·µ•-adjust-‚âº‚Çï :
  Œ£‚Çï ‚âº Œ£‚Çï‚Ä≤
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]
  ‚Üí ‚ü® Œ£‚Çï‚Ä≤ , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]
‚ä¢·µ•-adjust-‚âº‚Çï ‚âºŒ£ TVUnit = TVUnit
‚ä¢·µ•-adjust-‚âº‚Çï ‚âºŒ£ TVCst = TVCst
‚ä¢·µ•-adjust-‚âº‚Çï ‚âºŒ£ (TVClos ‚àÄ‚ä®ùìî ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ <‚¶ÇS) = TVClos (Œª ùì¢‚Ä≤ ùì¢‚âº ‚Üí ‚ä®-adjust-‚âº‚Çï ‚âºŒ£ (‚àÄ‚ä®ùìî ùì¢‚Ä≤ ùì¢‚âº)) ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ <‚¶ÇS
‚ä¢·µ•-adjust-‚âº‚Çï {Œ£‚Çï = Œ£‚Çï} ‚âºŒ£ (TVRef {ùüô} ‚Ñì< lkup‚â° <‚¶ÇS)
  with ‚âºŒ£ in eq
... | qts , eq1  
  = TVRef (‚â§‚Ñï-trans ‚Ñì< (‚âº‚áílength ‚âºŒ£)) (trans (lookup-from-i‚Ä≤ Œ£‚Çï ‚Ñì< eq1) lkup‚â°) <‚¶ÇS
‚ä¢·µ•-adjust-‚âº‚Çï ‚âºŒ£ (TVRef {ùüö} ‚Ñì< lkup‚â° <‚¶ÇS) = TVRef ‚Ñì< lkup‚â° <‚¶ÇS

‚ä®-adjust-‚âº‚Çï ‚âºŒ£ ‚ä®ùìî
  = mk-‚ä® (Œª x‚àà ‚Üí let v , acc , ‚ä¢v = ‚ä®-heap ‚ä®ùìî x‚àà in v , acc , ‚ä¢·µ•-adjust-‚âº‚Çï ‚âºŒ£ ‚ä¢v)
         (Œª x‚àà ‚Üí let a , sa , v , eq , ‚ä¢v = ‚ä®-stack ‚ä®ùìî x‚àà in a , sa , v , eq , ‚ä¢·µ•-adjust-‚âº‚Çï ‚âºŒ£ ‚ä¢v)



‚ä¢‚Çõ-adjust-aux-‚âº‚Çï : ‚àÄ {vs : List Val} {Œ£·µ£ : List QType}
  ‚Üí Œ£‚Çï ‚âº Œ£‚Çï‚Ä≤
  ‚Üí Pointwise ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[_‚¶Ç_] vs Œ£·µ£
  ‚Üí Pointwise ‚ü® Œ£‚Çï‚Ä≤ , Œ£‚Çõ ‚ü©‚ä¢[_‚¶Ç_] vs Œ£·µ£
‚ä¢‚Çõ-adjust-aux-‚âº‚Çï ‚âºŒ£ [] = []
‚ä¢‚Çõ-adjust-aux-‚âº‚Çï ‚âºŒ£ (x‚àºy ‚à∑ pws) = ‚ä¢·µ•-adjust-‚âº‚Çï ‚âºŒ£ x‚àºy ‚à∑ ‚ä¢‚Çõ-adjust-aux-‚âº‚Çï ‚âºŒ£ pws


‚ä¢‚Çõ-adjust-‚âº‚Çï :
  Œ£‚Çï ‚âº Œ£‚Çï‚Ä≤
  ‚Üí Œ£‚Çï , Œ£‚Çõ ‚ä¢‚Çõ ùì¢
  ‚Üí Œ£‚Çï‚Ä≤ , Œ£‚Çõ ‚ä¢‚Çõ ùì¢
‚ä¢‚Çõ-adjust-‚âº‚Çï ‚âºŒ£ ‚ä¢ùì¢ = ‚ä¢‚Çõ-adjust-aux-‚âº‚Çï ‚âºŒ£ ‚ä¢ùì¢



‚ä¢‚Çõ-adjust-push : ‚àÄ {vs}
  ‚Üí Œ£‚Çï , Œ£‚Çõ ‚ä¢‚Çõ ùì¢
  ‚Üí Œ£‚Çï , Œ£‚Çõ ‚ä¢‚Çõ mkS (ùì¢ .vars ++ vs) (ùì¢ .refs)
‚ä¢‚Çõ-adjust-push {ùì¢ = ùì¢} ‚ä¢ùì¢ = ‚ä¢ùì¢


‚ä®-adjust-push-update : ‚àÄ {S‚ÇÅ‚â§x} s
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v‚ÇÄ ‚¶Ç S ]
  ‚Üí (‚ä®ùìî   : ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢)
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , (Œì , X s ùüö ‚¶Ç S [ S‚ÇÅ‚â§x ]) ‚ü©‚ä® ‚ü® s ‚áí length (ùì¢ .vars) , ùìî ‚ü© / mkS (ùì¢ .vars ++ [ v‚ÇÄ ]) (ùì¢ .refs)

‚ä®-adjust-push-update  {v‚ÇÄ = v‚ÇÄ}{ùì¢ = ùì¢} s ‚ä¢v‚ÇÄ ‚ä®ùìî
  = mk-‚ä® (Œª{ (there x‚àà x‚â¢) ‚Üí let v , acc , ‚ä¢v = ‚ä®-heap ‚ä®ùìî x‚àà in v , skip acc (x‚â¢ ‚àò sym) , ‚ä¢v })
         (Œª{ here ‚Üí length (ùì¢ .vars) , here , v‚ÇÄ , ‚Üì‚Ä≤-last (ùì¢ .vars) , ‚ä¢v‚ÇÄ
           ; (there x‚àà x‚â¢) ‚Üí let a , acc , v , eq , ‚ä¢v = ‚ä®-stack ‚ä®ùìî x‚àà in a , there acc (x‚â¢ ‚àò sym) , v , ‚Üì‚Ä≤-mono {vs = ùì¢ .vars} {vs‚Ä≤ = [ v‚ÇÄ ]} a eq , ‚ä¢v })

-- value typing extends

‚ä®-extend-Œ£ : Œ£‚Çï ‚âº Œ£‚Çï‚Ä≤ ‚Üí Œ£‚Çõ ‚âº Œ£‚Çõ‚Ä≤ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢ ‚Üí ‚ü® Œ£‚Çï‚Ä≤ , Œ£‚Çõ‚Ä≤ , Œì ‚ü©‚ä® ùìî / ùì¢

[‚¶Ç]-‚âº‚Çï‚Çõ :  Œ£‚Çï ‚âº Œ£‚Çï‚Ä≤ ‚Üí Œ£‚Çõ ‚âº Œ£‚Çõ‚Ä≤ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ] ‚Üí ‚ü® Œ£‚Çï‚Ä≤ , Œ£‚Çõ‚Ä≤ ‚ü©‚ä¢[ v ‚¶Ç S ]
[‚¶Ç]-‚âº‚Çï‚Çõ Œ£‚âº‚Çï Œ£‚âº‚Çõ TVUnit = TVUnit
[‚¶Ç]-‚âº‚Çï‚Çõ Œ£‚âº‚Çï Œ£‚âº‚Çõ TVCst = TVCst
[‚¶Ç]-‚âº‚Çï‚Çõ Œ£‚âº‚Çï Œ£‚âº‚Çõ (TVClos ‚àÄ‚ä®ùìî ùì¢‚â° qbd ‚ä¢e œÉ?‚â° cq‚ÇÇ <‚¶ÇS) = TVClos (Œª ùì¢‚Ä≤ ùì¢‚âº ‚Üí ‚ä®-extend-Œ£ Œ£‚âº‚Çï Œ£‚âº‚Çõ (‚àÄ‚ä®ùìî  ùì¢‚Ä≤ ùì¢‚âº)) ùì¢‚â° qbd ‚ä¢e œÉ?‚â° cq‚ÇÇ <‚¶ÇS
[‚¶Ç]-‚âº‚Çï‚Çõ {Œ£‚Çï = Œ£‚Çï} {Œ£‚Çõ = Œ£‚Çõ} Œ£‚âº‚Çï@(qts , eq) Œ£‚âº‚Çõ (TVRef {q = ùüô} ‚Ñì< lkup‚â° <‚¶ÇS) = TVRef (‚â§‚Ñï-trans ‚Ñì< (‚âº‚áílength Œ£‚âº‚Çï)) (trans (lookup-from-i‚Ä≤ Œ£‚Çï ‚Ñì< eq) lkup‚â°) <‚¶ÇS
[‚¶Ç]-‚âº‚Çï‚Çõ {Œ£‚Çï = Œ£‚Çï} {Œ£‚Çõ = Œ£‚Çõ} Œ£‚âº‚Çï Œ£‚âº‚Çõ@(qts , eq) (TVRef {q = ùüö} ‚Ñì< lkup‚â° <‚¶ÇS) = TVRef (‚â§‚Ñï-trans ‚Ñì< (‚âº‚áílength Œ£‚âº‚Çõ)) (trans (lookup-from-i‚Ä≤ Œ£‚Çõ ‚Ñì< eq) lkup‚â°) <‚¶ÇS


-- agreement extends


‚ä®-extend-Œ£ Œ£‚âº‚Çï Œ£‚âº‚Çõ ‚ä®Œì = mk-‚ä® (Œª x‚àà ‚Üí let v , acc , ‚ä¢v = ‚ä®-heap ‚ä®Œì x‚àà in v , acc , [‚¶Ç]-‚âº‚Çï‚Çõ Œ£‚âº‚Çï Œ£‚âº‚Çõ ‚ä¢v)
                             (Œª x‚àà ‚Üí let a , sa , v , eq , ‚ä¢v = ‚ä®-stack ‚ä®Œì x‚àà in a , sa , v , eq , [‚¶Ç]-‚âº‚Çï‚Çõ Œ£‚âº‚Çï Œ£‚âº‚Çõ ‚ä¢v)


-- heap typing extends (needed?)




‚ä®-extend-ùüô : ‚àÄ {S‚ÇÅ‚â§x} s T
  ‚Üí (‚ä¢v : ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô)])
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , (Œì , X s ùüô ‚¶Ç (T ^ ùüô) [ S‚ÇÅ‚â§x ]) ‚ü©‚ä® ‚ü® s ‚âî v , ùìî ‚ü© / ùì¢
‚ä®-extend-ùüô {v = v} s T ‚ä¢v ‚ä®ùìî =
  mk-‚ä® (Œª{ here ‚Üí v , here , ‚ä¢v
       ; (there x‚àà x‚â¢) ‚Üí let v , acc , ‚ä¢v = ‚ä®-heap ‚ä®ùìî x‚àà in v , there acc (x‚â¢ ‚àò sym) , ‚ä¢v})
       (Œª{ (there x‚àà x‚â¢) ‚Üí let a , sa , v , eq , ‚ä¢v = ‚ä®-stack ‚ä®ùìî x‚àà in a , (skip sa (x‚â¢ ‚àò sym)) , v , eq , ‚ä¢v})


‚ä®ùìî-stack-ùüô : q-Bound ùüô Œì ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ‚Ä≤ , Œì ‚ü©‚ä® ùìî / ùì¢
‚ä¢v-stack-ùüô : ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô) ] ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ‚Ä≤ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô) ]

‚ä¢v-stack-ùüô TVUnit = TVUnit
‚ä¢v-stack-ùüô TVCst = TVCst
‚ä¢v-stack-ùüô (TVClos {q = ùüô} ‚àÄ‚ä®ùìî ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ <‚¶ÇS) = TVClos (Œª ùì¢‚Ä≤ ùì¢‚âº ‚Üí ‚ä®ùìî-stack-ùüô qbd (‚àÄ‚ä®ùìî ùì¢‚Ä≤ ùì¢‚âº)) ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ <‚¶ÇS
‚ä¢v-stack-ùüô (TVClos {q = ùüö} ‚àÄ‚ä®ùìî ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ (SQual () x))
‚ä¢v-stack-ùüô (TVRef {ùüô} ‚Ñì< lkup‚â° <‚¶ÇS) = TVRef ‚Ñì< lkup‚â° <‚¶ÇS
‚ä¢v-stack-ùüô (TVRef {ùüö} ‚Ñì< lkup‚â° (SQual () x))

‚ä®ùìî-stack-ùüô qbd ‚ä®ùìî = mk-‚ä® (Œª x‚àà ‚Üí let v , acc , ‚ä¢v = ‚ä®-heap ‚ä®ùìî x‚àà in v , acc , ‚ä¢v-stack-ùüô ‚ä¢v)
                         (Œª {s} {S} x‚àà ‚Üí contradiction x‚àà (ùüô-bound‚áí‚àÄùüö‚àâ qbd s S))

access-soundness : ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢ ‚Üí Œì ‚àã X s ùüô ‚¶Ç (T ^ ùüô) ‚Üí Access ùìî (X s ùüô) v ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô) ]
access-soundness Œì‚ä® x‚àà access
  with ‚ä®-heap Œì‚ä® x‚àà
... | v , acc‚Ä≤ , ‚ä¢v
  rewrite access-unique access acc‚Ä≤ = ‚ä¢v

¬¨xùüô‚ààùüö : ¬¨ (Œì ‚àã X s ùüô ‚¶Ç mkQ ùüö T)
¬¨xùüô‚ààùüö (there x‚àà x‚â¢) = ¬¨xùüô‚ààùüö x‚àà

genaccess-soundness : ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢ ‚Üí Œì ‚àã x ‚¶Ç (T ^ q) ‚Üí GenAccess ùìî x (inj‚ÇÅ v) ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ q) ]
genaccess-soundness {q = ùüô} ‚ä®ùìî x‚àà (on-heap acc) = access-soundness ‚ä®ùìî x‚àà acc
genaccess-soundness {q = ùüö} ‚ä®ùìî x‚àà (on-heap acc) = contradiction x‚àà ¬¨xùüô‚ààùüö

genaccess-soundness-ùüö : ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢ ‚Üí Œì ‚àã x ‚¶Ç (T ^ q) ‚Üí GenAccess ùìî x (inj‚ÇÇ a) ‚Üí ‚àÄ v ‚Üí just v ‚â° ùì¢ ‚Üì·µ• a ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ q) ]
genaccess-soundness-ùüö ‚ä®ùìî x‚àà (on-stack sa) v eq
  with ‚ä®-stack ‚ä®ùìî x‚àà
... | a , sa‚Ä≤ , v‚Ä≤ , eq‚Ä≤ , ‚ä¢v
  rewrite stack-access-unique sa sa‚Ä≤ | sym eq
  with eq‚Ä≤
... | refl = ‚ä¢v



<‚¶Ç-val-lift : ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S‚ÇÅ ] ‚Üí S‚ÇÅ <‚¶Ç S‚ÇÇ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S‚ÇÇ ]
<‚¶Ç-val-lift TVUnit (SQual _ SUnit) = TVUnit
<‚¶Ç-val-lift TVCst  (SQual _ SBase) = TVCst
<‚¶Ç-val-lift (TVClos ‚àÄ‚ä®ùìî ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ <‚¶ÇS‚ÇÅ) S‚ÇÅ<‚¶ÇS‚ÇÇ = TVClos ‚àÄ‚ä®ùìî ùì¢‚â° qbd ‚ä¢e cq‚ÇÅ cq‚ÇÇ (<‚¶Ç-trans <‚¶ÇS‚ÇÅ S‚ÇÅ<‚¶ÇS‚ÇÇ)
<‚¶Ç-val-lift (TVRef ‚Ñì< lkup‚â° <‚¶ÇS‚ÇÅ) S‚ÇÅ<‚¶ÇS‚ÇÇ = TVRef ‚Ñì< lkup‚â° (<‚¶Ç-trans <‚¶ÇS‚ÇÅ S‚ÇÅ<‚¶ÇS‚ÇÇ)


-- operational semantics

-- operations on references: deref and update

data read : List Val ‚Üí ‚Ñï ‚Üí Val ‚Üí Set where

  read0 : read (v ‚à∑ vs) zero v
  read1 : read vs n v ‚Üí read (v‚Ä≤ ‚à∑ vs) (suc n) v

data sread : Stack ‚Üí ‚Ñï ‚Üí Val ‚Üí Set where

  sread0 : read (ùì¢ .refs) ‚Ñì v ‚Üí sread ùì¢ ‚Ñì v

data write : List Val ‚Üí ‚Ñï ‚Üí Val ‚Üí List Val ‚Üí Set where

  write0 : write (v‚Ä≤ ‚à∑ vs) zero v (v ‚à∑ vs)
  write1 : write vs n v vs‚Ä≤ ‚Üí write (v‚Ä≤ ‚à∑ vs) (suc n) v (v‚Ä≤ ‚à∑ vs‚Ä≤)

data swrite : Stack ‚Üí ‚Ñï ‚Üí Val ‚Üí Stack ‚Üí Set where

  swrite0 : ‚àÄ{vars} ‚Üí write vs ‚Ñì v vs‚Ä≤ ‚Üí swrite (mkS vars vs) ‚Ñì v (mkS vars vs‚Ä≤)

length-write : write vs ‚Ñì v vs‚Ä≤ ‚Üí length vs ‚â° length vs‚Ä≤
length-write write0 = refl
length-write (write1 wr) = cong suc (length-write wr)

‚âº‚Çõ-swrite : swrite ùì¢ ‚Ñì v ùì¢‚Ä≤ ‚Üí ùì¢ ‚âº‚Çõ ùì¢‚Ä≤
‚âº‚Çõ-swrite (swrite0 wr) = ([] , ++-identity ≥ _) , ‚â°‚áí‚â§ (length-write wr)

{-unused-}
swrite-‚âº‚Çõ : swrite ùì¢ ‚Ñì v ùì¢‚Ä≤ ‚Üí ùì¢‚Ä≤ ‚âº‚Çõ ùì¢
swrite-‚âº‚Çõ (swrite0 wr) = ([] , ++-identity ≥ _) , ‚â°‚áí‚â§ (sym (length-write wr))

typed-read-aux : ‚àÄ {q}{T : Typeof q}{Œ£·µ£ : List (Typeof q)}
  ‚Üí Pointwise (Œª v T ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (q ^^ T) ] ) ùìó Œ£·µ£
  ‚Üí {‚Ñì : ‚Ñï}
  ‚Üí (‚Ñì< : ‚Ñì < length Œ£·µ£)
  ‚Üí (lkup‚â° : lookup Œ£·µ£ (from‚Ñï< ‚Ñì<) ‚â° T)
  ‚Üí read ùìó ‚Ñì v
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (q ^^ T) ]
typed-read-aux (x‚àºy ‚à∑ pws) {zero} ‚Ñì< refl read0 = x‚àºy
typed-read-aux (x‚àºy ‚à∑ pws) {suc ‚Ñì} (s‚â§s ‚Ñì<) lkup‚â° (read1 rd) = typed-read-aux pws {‚Ñì} ‚Ñì< lkup‚â° rd

typed-read : Œ£‚Çï ‚ä¢‚Çï ùìó
  ‚Üí (‚Ñì< : ‚Ñì < length Œ£‚Çï)
  ‚Üí (lkup‚â° : lookup Œ£‚Çï (from‚Ñï< ‚Ñì<) ‚â° T)
  ‚Üí read ùìó ‚Ñì v
  ‚Üí ‚ü® Œ£‚Çï , [] ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô) ]
typed-read {Œ£‚Çï = Œ£‚Çï} ‚ä¢ùìó ‚Ñì< lkup‚â° xread = typed-read-aux {Œ£·µ£ = Œ£‚Çï}  ‚ä¢ùìó ‚Ñì< lkup‚â° xread 

typed-sread : Œ£‚Çï , Œ£‚Çõ ‚ä¢‚Çõ ùì¢
  ‚Üí (‚Ñì< : ‚Ñì < length Œ£‚Çõ)
  ‚Üí (lkup‚â° : lookup Œ£‚Çõ (from‚Ñï< ‚Ñì<) ‚â° S)
  ‚Üí sread ùì¢ ‚Ñì v
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]
typed-sread {Œ£‚Çõ = Œ£‚Çõ} ‚ä¢ùì¢ ‚Ñì< lkup‚â° (sread0 xread) = typed-read-aux {Œ£·µ£ = Œ£‚Çõ} ‚ä¢ùì¢ ‚Ñì< lkup‚â° xread

typed-write-aux : ‚àÄ {q}{T : Typeof q}{Œ£·µ£}
  ‚Üí Pointwise (Œª w T ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ w ‚¶Ç (q ^^ T) ] ) ùìó Œ£·µ£
  ‚Üí {‚Ñì : ‚Ñï}
  ‚Üí (‚Ñì< : ‚Ñì < length Œ£·µ£)
  ‚Üí (lkup‚â° : lookup Œ£·µ£ (from‚Ñï< ‚Ñì<) ‚â° T)
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (q ^^ T) ]
  ‚Üí write ùìó ‚Ñì v ùìó‚Ä≤
  ‚Üí Pointwise (Œª w T ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ w ‚¶Ç (q ^^ T) ] ) ùìó‚Ä≤ Œ£·µ£
typed-write-aux (x‚àºy ‚à∑ pws) {zero} ‚Ñì< refl ‚ä¢v write0 = ‚ä¢v ‚à∑ pws
typed-write-aux (x‚àºy ‚à∑ pws) {suc ‚Ñì} (s‚â§s ‚Ñì<) lkup‚â° ‚ä¢v (write1 xwrite) = x‚àºy ‚à∑ typed-write-aux pws ‚Ñì< lkup‚â° ‚ä¢v xwrite

typed-write : ‚àÄ {T : Type ùüô}
  ‚Üí Œ£‚Çï ‚ä¢‚Çï ùìó
  ‚Üí (‚Ñì< : ‚Ñì < length Œ£‚Çï)
  ‚Üí (lkup‚â° : lookup Œ£‚Çï (from‚Ñï< ‚Ñì<) ‚â° T)
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô) ]
  ‚Üí write ùìó ‚Ñì v ùìó‚Ä≤
  ‚Üí Œ£‚Çï ‚ä¢‚Çï ùìó‚Ä≤
typed-write {Œ£‚Çï = Œ£‚Çï} ‚ä¢ùìó ‚Ñì< lkup‚â° ‚ä¢v xwrite = typed-write-aux {Œ£·µ£ = Œ£‚Çï} ‚ä¢ùìó ‚Ñì< lkup‚â° (‚ä¢·µ•-adjust-ùüô ‚ä¢v) xwrite

typed-swrite : ‚àÄ {S}
  ‚Üí Œ£‚Çï , Œ£‚Çõ ‚ä¢‚Çõ ùì¢
  ‚Üí (‚Ñì< : ‚Ñì < length Œ£‚Çõ)
  ‚Üí (lkup‚â° : lookup Œ£‚Çõ (from‚Ñï< ‚Ñì<) ‚â° S)
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]
  ‚Üí swrite ùì¢ ‚Ñì v ùì¢‚Ä≤
  ‚Üí Œ£‚Çï , Œ£‚Çõ ‚ä¢‚Çõ ùì¢‚Ä≤
typed-swrite {Œ£‚Çõ = Œ£‚Çõ} ‚ä¢ùì¢ ‚Ñì< lkup‚â° ‚ä¢v (swrite0 xwrite) = typed-write-aux {Œ£·µ£ = Œ£‚Çõ} ‚ä¢ùì¢ ‚Ñì< lkup‚â° ‚ä¢v xwrite

‚ä¢ùìó-extend-ùüô-aux : ‚àÄ {Œ£·µ£} ‚Üí (T : Type ùüô) (‚ä¢v : ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç mkQ ùüô T ])
  ‚Üí (‚ä¢ùìó    : Pointwise (Œª v T ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç T ^ ùüô ]) ùìó Œ£·µ£)
  ‚Üí Pointwise (Œª v T‚Ä≤ ‚Üí ‚ü® Œ£‚Çï ++ [ T ] , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T‚Ä≤ ^ ùüô)] ) (ùìó ++ v ‚à∑ []) (Œ£·µ£ ++ [ T ])
‚ä¢ùìó-extend-ùüô-aux T ‚ä¢v [] = ([‚¶Ç]-‚âº‚Çï‚Çõ ([ T ] , refl) ‚âº-refl ‚ä¢v) ‚à∑ []
‚ä¢ùìó-extend-ùüô-aux T ‚ä¢v (x‚àºy ‚à∑ ‚ä¢ùìó) = [‚¶Ç]-‚âº‚Çï‚Çõ ([ T ] , refl) ‚âº-refl x‚àºy ‚à∑ (‚ä¢ùìó-extend-ùüô-aux T ‚ä¢v ‚ä¢ùìó)

‚ä¢ùìó-extend-ùüô : (T : Type ùüô) (‚ä¢v : ‚ü® Œ£‚Çï , [] ‚ü©‚ä¢[ v ‚¶Ç mkQ ùüô T ]) (‚ä¢ùìó : Œ£‚Çï ‚ä¢‚Çï ùìó)
  ‚Üí Pointwise (Œª v T‚Ä≤ ‚Üí ‚ü® Œ£‚Çï ++ [ T ] , [] ‚ü©‚ä¢[ v ‚¶Ç (T‚Ä≤ ^ ùüô)] ) (ùìó ++ v ‚à∑ []) (Œ£‚Çï ++ [ T ])
‚ä¢ùìó-extend-ùüô T ‚ä¢v ‚ä¢ùìó = ‚ä¢ùìó-extend-ùüô-aux T ‚ä¢v ‚ä¢ùìó

‚ä¢ùì¢-extend-ùüô-aux : ‚àÄ {Œ£·µ£} {xs : List Val} ‚Üí (T : Type ùüô)
  ‚Üí (‚ä¢ùì¢ : Pointwise (Œª v S ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]) xs Œ£·µ£)
  ‚Üí Pointwise (Œª v S ‚Üí ‚ü® Œ£‚Çï ++ [ T ] , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]) xs Œ£·µ£
‚ä¢ùì¢-extend-ùüô-aux T [] = []
‚ä¢ùì¢-extend-ùüô-aux T (x‚àºy ‚à∑ ‚ä¢ùì¢) = [‚¶Ç]-‚âº‚Çï‚Çõ ([ T ] , refl) ‚âº-refl x‚àºy ‚à∑ (‚ä¢ùì¢-extend-ùüô-aux T ‚ä¢ùì¢)

‚ä¢ùì¢-extend-ùüô : (T : Type ùüô) ‚Üí (‚ä¢ùì¢ : Œ£‚Çï , Œ£‚Çõ ‚ä¢‚Çõ ùì¢) ‚Üí (Œ£‚Çï ++ [ T ]) , Œ£‚Çõ ‚ä¢‚Çõ ùì¢
‚ä¢ùì¢-extend-ùüô T ‚ä¢ùì¢ = ‚ä¢ùì¢-extend-ùüô-aux T ‚ä¢ùì¢



‚ä¢ùì¢-extend-ùüö-aux : ‚àÄ {Œ£·µ£ : List QType} {xs : List Val}
  ‚Üí (S : QType) (‚ä¢v : ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ])
  ‚Üí (‚ä¢ùì¢ : Pointwise (Œª v S‚Ä≤ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S‚Ä≤ ]) xs Œ£·µ£)
  ‚Üí Pointwise (Œª v S‚Ä≤ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ++ [ S ] ‚ü©‚ä¢[ v ‚¶Ç S‚Ä≤ ] ) (xs ++ [ v ]) (Œ£·µ£ ++ [ S ])
‚ä¢ùì¢-extend-ùüö-aux S ‚ä¢v [] = [‚¶Ç]-‚âº‚Çï‚Çõ ‚âº-refl ([ S ] , refl) ‚ä¢v ‚à∑ []
‚ä¢ùì¢-extend-ùüö-aux S ‚ä¢v (x‚àºy ‚à∑ pws) = [‚¶Ç]-‚âº‚Çï‚Çõ ‚âº-refl ([ S ] , refl) x‚àºy ‚à∑ ‚ä¢ùì¢-extend-ùüö-aux S ‚ä¢v pws

‚ä¢ùì¢-extend-ùüö : (S : QType)
  ‚Üí (‚ä¢v : ‚ü® Œ£‚Çï , Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ])
  ‚Üí (‚ä¢ùì¢ : Œ£‚Çï , Œ£‚Çõ ‚ä¢‚Çõ ùì¢)
  ‚Üí Pointwise (Œª v T‚Ä≤ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ ++ [ S ] ‚ü©‚ä¢[ v ‚¶Ç T‚Ä≤ ]) (ùì¢ .refs ++ [ v ]) (Œ£‚Çõ ++ [ S ])
‚ä¢ùì¢-extend-ùüö S ‚ä¢v ‚ä¢ùì¢ =  ‚ä¢ùì¢-extend-ùüö-aux S ‚ä¢v ‚ä¢ùì¢





‚à£_‚à£ ∞ = length

‚à£_‚à£À¢ : Stack ‚Üí ‚Ñï
‚à£_‚à£À¢ = length ‚àò vars

_‚äï_ : Env ‚Üí (Var √ó Val √ó Address) ‚Üí Env
ùìî ‚äï (X s ùüô , v , a) = ‚ü® s ‚âî v , ùìî ‚ü©
ùìî ‚äï (X s ùüö , v , a) = ‚ü® s ‚áí a , ùìî ‚ü©

_‚äï‚Çõ_ : Stack ‚Üí (Var √ó Val) ‚Üí Stack
ùì¢ ‚äï‚Çõ (X s ùüô , v) = ùì¢
ùì¢ ‚äï‚Çõ (X s ùüö , v) = push ùì¢ v

valloc : Stack ‚Üí Val ‚Üí Stack √ó ‚Ñï
valloc ùì¢ v = push ùì¢ v , ‚à£ ùì¢ ‚à£À¢

{-
alloc-length : ‚àÄ ùì¢ ‚Üí ‚à£ alloc ùì¢ v .proj‚ÇÅ ‚à£À¢ ‚â° suc ‚à£ ùì¢ ‚à£À¢
alloc-length {v = v} ùì¢ = trans (length-++ (ùì¢ .head) {[ v ]}) (trans (+-suc (‚à£ ùì¢ ‚à£À¢) zero) (cong suc (+-identity ≥ ‚à£ ùì¢ ‚à£À¢)))
-}

restore-frame? : Qual ‚Üí Stack ‚Üí Stack ‚Üí Stack
restore-frame? ùüô ùì¢‚ÇÅ ùì¢‚ÇÇ = ùì¢‚ÇÅ
restore-frame? ùüö ùì¢‚ÇÅ ùì¢‚ÇÇ = ùì¢‚ÇÇ

decode : Val ‚äé Address ‚Üí Stack ‚Üí Maybe Val
decode (inj‚ÇÅ v) ùì¢ = just v
decode (inj‚ÇÇ a) ùì¢ = ùì¢ ‚Üì·µ• a

-- H,S ‚ä¢ c ‚áìq s c ‚ä£ S
data _,_,_‚ä¢_‚áì[_]_‚ä£_,_
  : Env ‚Üí Heap ‚Üí Stack ‚Üí Expr ‚Üí Qual ‚Üí Val ‚Üí Heap ‚Üí Stack ‚Üí Set
  where

--! RuleEUnit
  EUnit  :
        ùìî , ùìó , ùì¢ ‚ä¢ unit ‚áì[ q ] unit ‚ä£ ùìó , ùì¢

--! RuleEVar
  EVar :
        GenAccess ùìî x va
       ‚Üí just v ‚â° decode va ùì¢
         ------------------------------------
       ‚Üí ùìî , ùìó , ùì¢ ‚ä¢ var x ‚áì[ q ] v ‚ä£ ùìó , ùì¢

--! RuleEAbs
  EAbs : ‚àÄ {ùì¢·∂ú}
       ‚Üí q‚ÇÅ ‚â§ q
       ‚Üí q‚ÇÇ ‚â§ q
       ‚Üí ùì¢·∂ú ‚â° new-frame? q‚ÇÅ ùì¢
       ‚Üí q-Bounded-Env q‚ÇÅ ùìî ùìî‚Ä≤
         -------------------------------------------------------------
       ‚Üí ùìî , ùìó , ùì¢ ‚ä¢ lam q‚ÇÅ x e q‚ÇÇ ‚áì[ q ]
                      clos q‚ÇÅ ùìî‚Ä≤ ùì¢·∂ú x e q‚ÇÇ ‚ä£ ùìó , ùì¢
       
--! RuleEApp
  EApp : q‚ÇÇ ‚â§ q‚ÇÄ
       ‚Üí ùìî , ùìó , ùì¢ ‚ä¢ e‚ÇÅ ‚áì[ ùüö ]
                      clos q ùìî‚Ä≤ ùì¢·∂ú (X s q‚ÇÅ) e q‚ÇÇ ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
       ‚Üí ùìî , ùìó‚Ä≤ , ùì¢‚Ä≤ ‚ä¢ e‚ÇÇ ‚áì[ q‚ÇÅ ] v‚ÇÇ ‚ä£ ùìó‚Ä≥ , ùì¢‚Ä≥
       ‚Üí let ùì¢‚Çô = new-frame? q ùì¢‚Ä≥
       in (ùìî‚Ä≤ ‚äï (X s q‚ÇÅ , v‚ÇÇ , ‚à£ ùì¢‚Çô ‚à£À¢)) , ùìó‚Ä≥ ,
          ùì¢‚Çô ‚äï‚Çõ (X s q‚ÇÅ , v‚ÇÇ) ‚ä¢ e ‚áì[ q‚ÇÄ ] v ‚ä£ ùìó‚Ä¥ , ùì¢‚Ä¥
       ‚Üí ùì¢‚Åó ‚â° restore-frame? q ùì¢‚Ä≥ ùì¢‚Ä¥
        ---------------------------------------------------------
       ‚Üí ùìî , ùìó , ùì¢ ‚ä¢ app e‚ÇÅ e‚ÇÇ ‚áì[ q‚ÇÄ ] v ‚ä£ ùìó‚Ä¥ , ùì¢‚Åó
  
--! RuleERef
  ERef :  q‚ÇÅ ‚â§ q
      ‚Üí ùìî , ùìó , ùì¢ ‚ä¢ e ‚áì[ q‚ÇÅ ] v ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
      ‚Üí (case q‚ÇÅ of Œª where
          ùüô ‚Üí ùì¢‚Ä≥ ‚â° ùì¢‚Ä≤ √ó n ‚â° ‚à£ ùìó‚Ä≤ ‚à£ ∞ √ó ùìó‚Ä≥ ‚â° ùìó‚Ä≤ ++ [ v ]
          ùüö ‚Üí ùìó‚Ä≥ ‚â° ùìó‚Ä≤ √ó (ùì¢‚Ä≥ , n) ‚â° salloc ùì¢‚Ä≤ v)
        --------------------------------------------------
      ‚Üí ùìî , ùìó , ùì¢ ‚ä¢ ref q‚ÇÅ e ‚áì[ q ] ref q‚ÇÅ n ‚ä£ ùìó‚Ä≥ , ùì¢‚Ä≥

--! RuleEDeref
  EDeref :
        ùìî , ùìó , ùì¢ ‚ä¢ e ‚áì[ ùüö ] ref q‚ÇÅ ‚Ñì ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
      ‚Üí case q‚ÇÅ of (Œª{ ùüô ‚Üí read ùìó‚Ä≤ ‚Ñì v ; ùüö ‚Üí sread ùì¢‚Ä≤ ‚Ñì v })
        ----------------------------------------------------
      ‚Üí ùìî , ùìó , ùì¢ ‚ä¢ deref e ‚áì[ q ] v ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤

--! RuleESetref
  ESetref :
        ùìî , ùìó , ùì¢ ‚ä¢ e‚ÇÅ ‚áì[ ùüö ] ref q‚ÇÅ ‚Ñì ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
      ‚Üí ùìî , ùìó‚Ä≤ , ùì¢‚Ä≤ ‚ä¢ e‚ÇÇ ‚áì[ q‚ÇÅ ] v ‚ä£ ùìó‚Ä≥ , ùì¢‚Ä≥
      ‚Üí case q‚ÇÅ of (Œª{ ùüô ‚Üí write ùìó‚Ä≥ ‚Ñì v ùìó‚Ä¥ √ó ùì¢‚Ä¥ ‚â° ùì¢‚Ä≥
                     ; ùüö ‚Üí ùìó‚Ä¥ ‚â° ùìó‚Ä≥ √ó swrite ùì¢‚Ä≥ ‚Ñì v ùì¢‚Ä¥ })
        ---------------------------------------------------------
      ‚Üí ùìî , ùìó , ùì¢ ‚ä¢ setref e‚ÇÅ e‚ÇÇ ‚áì[ q ] unit ‚ä£ ùìó‚Ä¥ , ùì¢‚Ä¥

--! RuleESeq
  ESeq :
         ùìî , ùìó , ùì¢ ‚ä¢ e‚ÇÅ ‚áì[ ùüö ] v‚ÇÅ ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
      ‚Üí  ùìî , ùìó‚Ä≤ , ùì¢‚Ä≤ ‚ä¢ e‚ÇÇ ‚áì[ q ] v‚ÇÇ ‚ä£ ùìó‚Ä≥ , ùì¢‚Ä≥
         ---------------------------------------------------------
      ‚Üí  ùìî , ùìó , ùì¢ ‚ä¢ seq e‚ÇÅ e‚ÇÇ ‚áì[ q ] v‚ÇÇ ‚ä£ ùìó‚Ä≥ , ùì¢‚Ä≥
