module Simple.Wellformedness where

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.String using (String; _‚âü_)
open import Data.List using (List; []; _‚à∑_; [_]; _++_; length; lookup; foldr)
open import Data.List.NonEmpty using (List‚Å∫; _‚à∑_; _‚à∑‚Å∫_; head; tail)
open import Data.List.Relation.Binary.Pointwise using (Pointwise; [] ; _‚à∑_; ++‚Å∫)
open import Data.Bool using (Bool; true; false)
open import Data.Fin using (Fin; zero; suc; from‚Ñï<; inject‚â§)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<_; z‚â§n; s‚â§s)
open import Data.Nat.Properties using () renaming (‚â§-trans to ‚â§‚Ñï-trans)
open import Data.Maybe using (Maybe; nothing; just)
open import Data.Product using (_√ó_; _,_ ; -,_; proj‚ÇÅ ; proj‚ÇÇ; ‚àÉ-syntax; Œ£)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Function using (case_of_)
open import Relation.Nullary.Decidable using (Dec; yes; no)
open import Relation.Nullary using (¬¨_; contradiction)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; sym; trans; cong; subst)

open import Qualifiers
open import Auxiliary
open import Simple.StackBasedBigStep


-- wellformed values and environments

data Heap-Env : Env ‚Üí Set where

  hpe-‚àÖ : Heap-Env ‚àÖ

  hpe-keep : Heap-Env ùìî ‚Üí Heap-Env ‚ü® s ‚âî v , ùìî ‚ü©

--! Wellformed {
data Wellformed-Env (ùì¢ : Stack) : Env ‚Üí Set

record Wellformed (ùì¢ : Stack) (v : Val) : Set where
  constructor WFV
  inductive
  field
    wfv : ‚àÄ {ùìî}{ùì¢·∂ú}
        ‚Üí clos-stack-env v ‚â° just (ùìî , ùì¢·∂ú)
        ‚Üí (q-val v ‚â° ùüô ‚Üí ùì¢·∂ú ‚â° ùì¢‚àÖ √ó Heap-Env ùìî)
        √ó ùì¢·∂ú ‚âº‚Çõ ùì¢
        √ó Wellformed-Env ùì¢·∂ú ùìî
        √ó Wellformed-Env ùì¢ ùìî

data Wellformed-Env ùì¢ where

  wf-‚àÖ     : Wellformed-Env ùì¢ ‚àÖ
  wf-ext-ùüô  : q-val v ‚â° ùüô
            ‚Üí Wellformed ùì¢ v
            ‚Üí Wellformed-Env ùì¢ ùìî
            ‚Üí Wellformed-Env ùì¢ ‚ü® s ‚âî v , ùìî ‚ü©
  wf-ext-ùüö  : just v ‚â° (ùì¢ ‚Üì·µ• a)
            ‚Üí Wellformed ùì¢ v
            ‚Üí Wellformed-Env ùì¢ ùìî
            ‚Üí Wellformed-Env ùì¢ ‚ü® s ‚áí a , ùìî ‚ü©
--! }

record Wellformed-List (ùì¢ : Stack) (vs : List Val) : Set where
  constructor WFL
  field
    wfl : ‚àÄ {‚Ñì} ‚Üí (‚Ñì< : ‚Ñì < length vs) ‚Üí Wellformed ùì¢ (lookup vs (from‚Ñï< ‚Ñì<))

record Wellformed-Heap (ùì¢ : Stack) (ùìó : Heap) : Set where
  constructor WFH
  field
    wfl : Wellformed-List ùì¢ ùìó
    wfh : ‚àÄ {‚Ñì} (‚Ñì< : ‚Ñì < length ùìó) ‚Üí q-val (lookup ùìó (from‚Ñï< ‚Ñì<)) ‚â° ùüô


wfe-ext-‚âº‚Çõ : ùì¢ ‚âº‚Çõ ùì¢‚Ä≤ ‚Üí Wellformed-Env ùì¢ ùìî ‚Üí Wellformed-Env ùì¢‚Ä≤ ùìî
wfv-ext-‚âº‚Çõ : ùì¢ ‚âº‚Çõ ùì¢‚Ä≤ ‚Üí Wellformed ùì¢ v ‚Üí Wellformed ùì¢‚Ä≤ v

wfe-ext-‚âº‚Çõ ùì¢‚âº wf-‚àÖ = wf-‚àÖ
wfe-ext-‚âº‚Çõ ùì¢‚âº (wf-ext-ùüô qv‚â° wfv wfe) = wf-ext-ùüô qv‚â° (wfv-ext-‚âº‚Çõ ùì¢‚âº wfv) (wfe-ext-‚âº‚Çõ ùì¢‚âº wfe)
wfe-ext-‚âº‚Çõ {ùì¢ = ùì¢}{ùì¢‚Ä≤ = ùì¢‚Ä≤} ùì¢‚âº (wf-ext-ùüö acc‚â° wfv wfe) = wf-ext-ùüö (‚Üì·µ•-mono {ùì¢ = ùì¢}{ùì¢‚Ä≤ = ùì¢‚Ä≤} ùì¢‚âº acc‚â°) (wfv-ext-‚âº‚Çõ ùì¢‚âº wfv) (wfe-ext-‚âº‚Çõ ùì¢‚âº wfe)

wfv-ext-‚âº‚Çõ {ùì¢ = ùì¢}{ùì¢‚Ä≤ = ùì¢‚Ä≤} ùì¢‚âº (WFV  wfv) = WFV (Œª {ùìî} {ùì¢·∂ú} c2se‚â° ‚Üí let qfun , ùì¢·∂ú‚âº , wfe0 , wfe = wfv c2se‚â° in qfun , (‚âº‚Çõ-trans{ùì¢‚ÇÅ = ùì¢·∂ú}{ùì¢‚ÇÇ = ùì¢}{ùì¢‚ÇÉ = ùì¢‚Ä≤} ùì¢·∂ú‚âº ùì¢‚âº) , wfe0 , (wfe-ext-‚âº‚Çõ ùì¢‚âº wfe))

wfl-ext-‚âº‚Çõ : ùì¢ ‚âº‚Çõ ùì¢‚Ä≤ ‚Üí Wellformed-List ùì¢ vs ‚Üí Wellformed-List ùì¢‚Ä≤ vs
wfl-ext-‚âº‚Çõ {ùì¢ = ùì¢} ùì¢‚âº (WFL wfl) = WFL (Œª ‚Ñì< ‚Üí wfv-ext-‚âº‚Çõ ùì¢‚âº (wfl ‚Ñì<))

wfh-ext-‚âº‚Çõ : ùì¢ ‚âº‚Çõ ùì¢‚Ä≤ ‚Üí Wellformed-Heap ùì¢ ùìó ‚Üí Wellformed-Heap ùì¢‚Ä≤ ùìó
wfh-ext-‚âº‚Çõ ùì¢‚âº (WFH wfl wfh) = WFH (wfl-ext-‚âº‚Çõ ùì¢‚âº wfl) (Œª {‚Ñì} ‚Ñì< ‚Üí wfh {‚Ñì} ‚Ñì<)

heap-env‚áíùüô-bounded-env : Heap-Env ùìî ‚Üí q-Bounded-Env ùüô ùìî ùìî
heap-env‚áíùüô-bounded-env hpe-‚àÖ = qbe-‚àÖ
heap-env‚áíùüô-bounded-env (hpe-keep hpenv) = qbe-keep (heap-env‚áíùüô-bounded-env hpenv)

ùüô-bounded‚áíheap-env : q-Bounded-Env ùüô ùìî ùìî‚Ä≤ ‚Üí Heap-Env ùìî‚Ä≤
ùüô-bounded‚áíheap-env qbe-‚àÖ = hpe-‚àÖ
ùüô-bounded‚áíheap-env (qbe-keep qbe) = hpe-keep (ùüô-bounded‚áíheap-env qbe)
ùüô-bounded‚áíheap-env (qbe-drop qbe) = ùüô-bounded‚áíheap-env qbe


ùüô-bounded-val-wfv : q-val v ‚â° ùüô ‚Üí Wellformed ùì¢ v ‚Üí Wellformed ùì¢‚Ä≤ v
ùüô-bounded-env-wfe : q-Bounded-Env ùüô ùìî ùìî‚Ä≤ ‚Üí Wellformed-Env ùì¢ ùìî ‚Üí Wellformed-Env ùì¢‚Ä≤ ùìî‚Ä≤

ùüô-bounded-env-wfe qbe-‚àÖ wf-‚àÖ = wf-‚àÖ
ùüô-bounded-env-wfe (qbe-keep qbd) (wf-ext-ùüô qv‚â° wfv wfe) = wf-ext-ùüô qv‚â° (ùüô-bounded-val-wfv qv‚â° wfv) (ùüô-bounded-env-wfe qbd wfe)
ùüô-bounded-env-wfe (qbe-drop qbd) (wf-ext-ùüö x x‚ÇÅ wfe) = ùüô-bounded-env-wfe qbd wfe

ùüô-bounded-val-wfv {unit} qv‚â° (WFV wfv) = WFV Œª ()
ùüô-bounded-val-wfv {cst x} qv‚â° (WFV wfv) = WFV Œª()
ùüô-bounded-val-wfv {clos q ùìî ùì¢ x e x‚ÇÅ} {ùì¢‚Ä≤ = ùì¢‚Ä≤} refl (WFV wfv)
  with wfv refl
... | qfun , ùì¢·∂ú‚âº , wfe0 , wfe
  with refl , hp-env ‚Üê qfun refl = WFV (Œª{ refl ‚Üí qfun , ‚âº‚Çõ-bot ùì¢‚Ä≤ , wfe0 , (ùüô-bounded-env-wfe (heap-env‚áíùüô-bounded-env hp-env) wfe)})
ùüô-bounded-val-wfv {ref q ‚Ñì} qv‚â° (WFV wfv) = WFV Œª()

wfe-push : ‚àÄ s ‚Üí Wellformed ùì¢ v ‚Üí Wellformed-Env ùì¢ ùìî ‚Üí Wellformed-Env (push ùì¢ v) ‚ü® s ‚áí ‚à£ ùì¢ ‚à£À¢ , ùìî ‚ü©
wfe-push {ùì¢ = ùì¢} s wfv wfe = wf-ext-ùüö (‚Üì‚Ä≤-last (ùì¢ .vars)) (wfv-ext-‚âº‚Çõ (‚âº‚Çõ-push {ùì¢ = ùì¢}) wfv) (wfe-ext-‚âº‚Çõ (‚âº‚Çõ-push {ùì¢ = ùì¢}) wfe)

wfh-wfh : Wellformed-Heap ùì¢ ùìó ‚Üí Wellformed-Heap ùì¢‚Ä≤ ùìó
wfh-wfh (WFH (WFL wfl) wfh) = WFH (WFL (Œª {‚Ñì} ‚Ñì< ‚Üí ùüô-bounded-val-wfv (wfh ‚Ñì<) (wfl ‚Ñì<))) (Œª {‚Ñì} ‚Ñì< ‚Üí wfh ‚Ñì<)

acc-qbe :  q-Bounded-Env ùüô ùìî ùìî‚Ä≤ ‚Üí Access ùìî (X s ùüô) v ‚Üí Access ùìî‚Ä≤ (X s ùüô) v
acc-qbe qbe-‚àÖ ()
acc-qbe (qbe-keep qbe) here = here
acc-qbe (qbe-keep qbe) (there acc x) = there (acc-qbe qbe acc) x
acc-qbe (qbe-drop qbe) (skip acc x) = acc-qbe qbe acc

‚ä®-qbe : q-Bounded-Env ùüô ùìî ùìî‚Ä≤ ‚Üí q-Bound ùüô Œì‚Ä≤ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì‚Ä≤ ‚ü©‚ä® ùìî / ùì¢‚àÖ ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì‚Ä≤ ‚ü©‚ä® ùìî‚Ä≤ / ùì¢‚àÖ
‚ä®-qbe qbe qdb ‚ä®ùìî = mk-‚ä® (Œª x‚àà ‚Üí let v , acc , ‚ä¢v = ‚ä®-heap ‚ä®ùìî x‚àà in v , acc-qbe qbe acc , ‚ä¢v)
                         Œª x‚àà ‚Üí contradiction x‚àà (ùüô-bound‚áí‚àÄùüö‚àâ qdb _ _)

wf-access : Wellformed-Env ùì¢ ùìî ‚Üí Access ùìî (X s ùüô) v ‚Üí Wellformed ùì¢ v
wf-access (wf-ext-ùüô qv‚â° wfv wfe) here = wfv
wf-access (wf-ext-ùüô qv‚â° wfv wfe) (there acc x) = wf-access wfe acc
wf-access (wf-ext-ùüö x x‚ÇÅ wfe) (skip acc x‚ÇÇ) = wf-access wfe acc

wf-saccess : Wellformed-Env ùì¢ ùìî ‚Üí StackAccess ùìî (X s ùüö) a ‚Üí (dec‚â°  : just v ‚â° (ùì¢ ‚Üì·µ• a)) ‚Üí Wellformed ùì¢ v
wf-saccess (wf-ext-ùüô qv‚â° x wfe) (skip sacc x‚ÇÅ) dec‚â° = wf-saccess wfe sacc dec‚â°
wf-saccess (wf-ext-ùüö x wfv wfe) here dec‚â°
  with trans dec‚â° (sym x)
... | refl = wfv
wf-saccess (wf-ext-ùüö x x‚ÇÅ wfe) (there sacc x‚ÇÇ) dec‚â° = wf-saccess wfe sacc dec‚â°

-- heap access

wf-hread : Wellformed-List ùì¢ ùìó ‚Üí read ùìó ‚Ñì v ‚Üí Wellformed ùì¢ v
wf-hread (WFL wfl) read0 = wfl (s‚â§s z‚â§n)
wf-hread (WFL wfl) (read1 rd) = wf-hread (WFL (Œª ‚Ñì< ‚Üí wfl (s‚â§s ‚Ñì<))) rd

wfh-hread : Wellformed-Heap ùì¢ ùìó ‚Üí read ùìó ‚Ñì v ‚Üí Wellformed ùì¢ v
wfh-hread (WFH wfl wfh) rd = wf-hread wfl rd

-- stack access

Wellformed-Stack : Stack ‚Üí Set
Wellformed-Stack ùì¢ = Wellformed-List ùì¢ (ùì¢ .refs)

wfs-push : Wellformed-Stack ùì¢ ‚Üí Wellformed-Stack (push ùì¢ v)
wfs-push {ùì¢ = ùì¢}{v = v} wfs rewrite sym (push-refs-‚â° {ùì¢ = ùì¢}{v = v}) = wfl-ext-‚âº‚Çõ (‚âº‚Çõ-push {ùì¢ = ùì¢}) wfs

wf-sread : Wellformed-Stack ùì¢ ‚Üí sread ùì¢ ‚Ñì v ‚Üí Wellformed ùì¢ v
wf-sread wfl (sread0 rd) = wf-hread wfl rd

wfs0 : Wellformed-Stack ùì¢‚àÖ
wfs0 = WFL (Œª())

wfl-add : Wellformed ùì¢ v ‚Üí Wellformed-List ùì¢ vs ‚Üí Wellformed-List ùì¢ (vs ++ [ v ])
wfl-add {v = v}{vs = vs} wfv wfl = WFL (aux wfv wfl)
  where aux : ‚àÄ {ùì¢} ‚Üí  Wellformed ùì¢ v ‚Üí Wellformed-List ùì¢ vs ‚Üí ‚àÄ {‚Ñì} (‚Ñì< : ‚Ñì < length (vs ++ [ v ])) ‚Üí Wellformed ùì¢ (lookup (vs ++ [ v ]) (from‚Ñï< ‚Ñì<))
        aux {ùì¢ = ùì¢} wfv (WFL wfl) ‚Ñì<
          with <-decomp vs v ‚Ñì<
        ... | inj‚ÇÅ ‚Ñì<< rewrite lookup-from-i‚Ä≤ vs {[ v ]} ‚Ñì<< refl = wfl ‚Ñì<<
        ... | inj‚ÇÇ ‚Ñì‚â°  rewrite lookup-last v vs | ‚Ñì‚â° = subst (Wellformed ùì¢) (sym (lookup-last v vs)) wfv

wfh-add : q-val v ‚â° ùüô ‚Üí Wellformed ùì¢ v ‚Üí Wellformed-Heap ùì¢ ùìó ‚Üí Wellformed-Heap ùì¢ (ùìó ++ [ v ])
wfh-add {v = v}{ùìó = ùìó} qv‚â° wfv (WFH wfl wfh) = WFH (wfl-add wfv wfl) (aux v qv‚â° wfh)
  where aux : (v : Val) (qv‚â° : q-val v ‚â° ùüô)
            ‚Üí ( {‚Ñì : ‚Ñï} (‚Ñì< : ‚Ñì < length ùìó) ‚Üí q-val (lookup ùìó (from‚Ñï< ‚Ñì<)) ‚â° ùüô)
            ‚Üí ( {‚Ñì : ‚Ñï} (‚Ñì< : ‚Ñì < length (ùìó ++ [ v ])) ‚Üí q-val (lookup (ùìó ++ [ v ]) (from‚Ñï< ‚Ñì<)) ‚â° ùüô)
        aux v qv‚â° wfh ‚Ñì<
          with <-decomp ùìó v ‚Ñì<
        ... | inj‚ÇÅ ‚Ñì<< rewrite lookup-from-i‚Ä≤ ùìó {[ v ]} ‚Ñì<< refl = wfh ‚Ñì<<
        ... | inj‚ÇÇ ‚Ñì‚â°  rewrite ‚Ñì‚â° = trans (cong q-val (lookup-last v ùìó)) qv‚â°


wfl-add-ùüö : Wellformed ùì¢ v ‚Üí Wellformed-Stack ùì¢ ‚Üí Wellformed-Stack (salloc ùì¢ v .proj‚ÇÅ)
wfl-add-ùüö {ùì¢ = ùì¢}{v = v} wfv wfs = wfl-add wfv‚Å∫ wfs‚Å∫
  where
    ùì¢‚Å∫ : Stack
    ùì¢‚Å∫ = salloc ùì¢ v .proj‚ÇÅ
    wfv‚Å∫ : Wellformed ùì¢‚Å∫ v
    wfv‚Å∫ = wfv-ext-‚âº‚Çõ (‚âº‚Çõ-salloc {ùì¢ = ùì¢}) wfv
    wfs‚Å∫ : Wellformed-List ùì¢‚Å∫ (ùì¢ .refs)
    wfs‚Å∫ = wfl-ext-‚âº‚Çõ (‚âº‚Çõ-salloc {ùì¢ = ùì¢}) wfs

wfl-write : Wellformed ùì¢ v ‚Üí write ùìó ‚Ñì v ùìó‚Ä≤ ‚Üí Wellformed-List ùì¢ ùìó ‚Üí Wellformed-List ùì¢ ùìó‚Ä≤
wfl-write {‚Ñì = zero}  wfv write0 (WFL wfl) = WFL (Œª{ {zero} ‚Ñì< ‚Üí wfv ; {suc ‚Ñì} ‚Ñì< ‚Üí wfl {suc ‚Ñì} ‚Ñì<})
wfl-write {‚Ñì = suc ‚Ñì} wfv (write1 hwrite) (WFL wfl)
  with wfl-write wfv hwrite (WFL (Œª ‚Ñì< ‚Üí wfl (s‚â§s ‚Ñì<)))
... | WFL wfl‚Ä≤ = WFL (Œª{ {zero} ‚Ñì< ‚Üí wfl (s‚â§s z‚â§n) ; {suc ‚Ñì} (s‚â§s ‚Ñì<) ‚Üí wfl‚Ä≤ ‚Ñì< })

wfh-write : q-val v ‚â° ùüô ‚Üí Wellformed ùì¢ v ‚Üí write ùìó ‚Ñì v ùìó‚Ä≤ ‚Üí Wellformed-Heap ùì¢ ùìó ‚Üí Wellformed-Heap ùì¢ ùìó‚Ä≤
wfh-write {‚Ñì = zero} qv‚â° wfv write0 (WFH (WFL wfl) wfh) = WFH (WFL (Œª{ {zero} ‚Ñì< ‚Üí wfv ; {suc ‚Ñì} ‚Ñì< ‚Üí wfl {suc ‚Ñì} ‚Ñì<}))
                                                              (Œª{ {zero} ‚Ñì< ‚Üí qv‚â° ; {suc ‚Ñì} ‚Ñì< ‚Üí wfh {suc ‚Ñì} ‚Ñì< })
wfh-write {v = v}{‚Ñì = suc ‚Ñì} qv‚â° wfv (write1 wr) (WFH (WFL wfl) wfh)
  with wfh-write {v = v} qv‚â° wfv wr (WFH (WFL Œª ‚Ñì< ‚Üí wfl (s‚â§s ‚Ñì<)) Œª ‚Ñì< ‚Üí wfh (s‚â§s ‚Ñì<))
... | WFH (WFL wfl‚Ä≤) wfh‚Ä≤ = WFH (WFL (Œª{ {zero} ‚Ñì< ‚Üí wfl (s‚â§s z‚â§n) ; {suc ‚Ñì} (s‚â§s ‚Ñì<) ‚Üí wfl‚Ä≤ ‚Ñì< }))
                                (Œª{ {zero} ‚Ñì< ‚Üí wfh (s‚â§s z‚â§n) ; {suc ‚Ñì} (s‚â§s ‚Ñì<) ‚Üí wfh‚Ä≤ ‚Ñì<})


