module Simple.Soundness where

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.String using (String; _‚âü_)
open import Data.List using (List; []; _‚à∑_; [_]; _++_; length; lookup; foldr)
open import Data.List.NonEmpty using (List‚Å∫; _‚à∑_; _‚à∑‚Å∫_; head; tail)
open import Data.List.Relation.Binary.Pointwise using (Pointwise; [] ; _‚à∑_; ++‚Å∫)
open import Data.List.Properties using (++-identity ≥)
open import Data.Bool using (Bool; true; false)
open import Data.Fin using (Fin; zero; suc; from‚Ñï<; inject‚â§)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<_; z‚â§n; s‚â§s) renaming (_‚â§_ to _‚â§‚Ñï_)
open import Data.Nat.Properties using () renaming (‚â§-trans to ‚â§‚Ñï-trans)
open import Data.Maybe using (Maybe; nothing; just)
open import Data.Product using (_√ó_; _,_ ; -,_; proj‚ÇÅ ; proj‚ÇÇ; ‚àÉ-syntax; Œ£)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Function using (case_of_)
open import Relation.Nullary.Decidable using (Dec; yes; no)
open import Relation.Nullary using (¬¨_; contradiction)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; sym; trans; cong; subst)

open import Qualifiers
open import Auxiliary
open import Simple.StackBasedBigStep


-- wellformed values and environments

open import Simple.Wellformedness


-- assumptions and results for the soundness theorem

record Assumption (Œ£‚Çï : HType) (Œ£‚Çõ : SType) (ùìó : Heap) (ùì¢ : Stack) (Œì : Context) (ùìî : Env) (S : QType) (q : Qual) : Set where
  field
    ‚Üì‚ä¢ùìó : Œ£‚Çï ‚ä¢‚Çï ùìó
    ‚Üì‚ä¢ùì¢ : Œ£‚Çï , Œ£‚Çõ ‚ä¢‚Çõ ùì¢
    ‚Üì‚ä®ùìî : ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢
    ‚ÜìS‚â§-q : q-of S ‚â§ q
    ‚Üìùìî-wft : Wellformed-Env ùì¢ ùìî



record Result (Œ£‚Çï : HType) (Œ£‚Çõ : SType) (v : Val) (S : QType) (ùìó‚Ä≤ : Heap) (ùì¢ ùì¢‚Ä≤ : Stack) : Set where
  field
    ‚ÜëŒ£‚Çï‚Ä≤ : HType
    ‚ÜëŒ£‚Çõ‚Ä≤ : SType
    ‚ÜëŒ£‚âº‚Çï : Œ£‚Çï ‚âº ‚ÜëŒ£‚Çï‚Ä≤
    ‚ÜëŒ£‚âº‚Çõ : Œ£‚Çõ ‚âº ‚ÜëŒ£‚Çõ‚Ä≤
    ‚Üë‚ä¢v   : ‚ü® ‚ÜëŒ£‚Çï‚Ä≤ , ‚ÜëŒ£‚Çõ‚Ä≤ ‚ü©‚ä¢[ v ‚¶Ç S ]
    ‚Üë‚ä¢ùìó  : ‚ÜëŒ£‚Çï‚Ä≤ ‚ä¢‚Çï ùìó‚Ä≤
    ‚Üë‚ä¢ùì¢   : ‚ÜëŒ£‚Çï‚Ä≤ , ‚ÜëŒ£‚Çõ‚Ä≤ ‚ä¢‚Çõ ùì¢‚Ä≤
    ‚Üëùì¢‚âº   : ùì¢ ‚âº‚Çõ ùì¢‚Ä≤
    ‚Üëcls  : Wellformed ùì¢‚Ä≤ v
    ‚Üëwf-ùìó : Wellformed-Heap ùì¢‚Ä≤ ùìó‚Ä≤
    ‚Üëwf-ùì¢  : Wellformed-Stack ùì¢‚Ä≤

open Result

---- soundness theorem of evaluation

eval-soundness :
    Œ£‚Çï ‚ä¢‚Çï ùìó
  ‚Üí Œ£‚Çï , Œ£‚Çõ ‚ä¢‚Çõ ùì¢
  ‚Üí ‚ü® Œ£‚Çï , Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢
  ‚Üí Wellformed-Env ùì¢ ùìî
  ‚Üí Wellformed-Heap ùì¢ ùìó
  ‚Üí Wellformed-Stack ùì¢
  ‚Üí q-of S ‚â§ q
  ‚Üí Œì ‚ä¢ e ‚¶Ç S
  ‚Üí ùìî , ùìó , ùì¢ ‚ä¢ e ‚áì[ q ] v ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
  ‚Üí Result Œ£‚Çï Œ£‚Çõ v S ùìó‚Ä≤ ùì¢ ùì¢‚Ä≤

-- subsumption

eval-soundness {ùì¢ = ùì¢} ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TSub ‚ä¢e <‚¶ÇS) ‚áì
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ (‚â§-trans (q-of-mono <‚¶ÇS) ‚â§-q) ‚ä¢e ‚áì
... | ih = record
             { ‚ÜëŒ£‚Çï‚Ä≤ = ‚ÜëŒ£‚Çï‚Ä≤ ih
             ; ‚ÜëŒ£‚âº‚Çï = ‚ÜëŒ£‚âº‚Çï ih
             ; ‚ÜëŒ£‚Çõ‚Ä≤ = ‚ÜëŒ£‚Çõ‚Ä≤ ih
             ; ‚ÜëŒ£‚âº‚Çõ = ‚ÜëŒ£‚âº‚Çõ ih 
             ; ‚Üë‚ä¢v = <‚¶Ç-val-lift (‚Üë‚ä¢v ih) <‚¶ÇS
             ; ‚Üë‚ä¢ùìó = ‚Üë‚ä¢ùìó ih
             ; ‚Üë‚ä¢ùì¢ = ‚Üë‚ä¢ùì¢ ih
             ; ‚Üëùì¢‚âº = ‚Üëùì¢‚âº ih
             ; ‚Üëcls = ‚Üëcls ih
             ; ‚Üëwf-ùìó = ih .‚Üëwf-ùìó
             ; ‚Üëwf-ùì¢ = ih .‚Üëwf-ùì¢
             }

-- lambda abstraction

eval-soundness {Œ£‚Çï = Œ£‚Çï}{Œ£‚Çõ = Œ£‚Çõ}{ùì¢ = ùì¢} ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TAbs {q = ùüô} ‚ä¢e qbdd {wf‚ÇÅ}{wf‚ÇÇ}) (EAbs wfc‚ÇÅ wfc‚ÇÇ refl qbe)
  = record
      { ‚ÜëŒ£‚Çï‚Ä≤ = Œ£‚Çï
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-refl
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ
      ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-refl
      ; ‚Üë‚ä¢v = TVClos (Œª ùì¢‚Ä≤ ùì¢‚âº ‚Üí ‚ä®-adjust-‚âº‚Çõ ùì¢‚âº (‚ä®-qbe qbe (is-bounded qbdd) (restrict‚Ä≤ ‚ä®ùìî qbdd))) refl (is-bounded qbdd) ‚ä¢e wf‚ÇÅ wf‚ÇÇ <‚¶Ç-refl
      ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢
      ; ‚Üëùì¢‚âº = ‚âº‚Çõ-refl {ùì¢}
      ; ‚Üëcls = WFV Œª{ refl ‚Üí (Œª{ refl ‚Üí refl , ùüô-bounded‚áíheap-env qbe}) , ‚âº‚Çõ-bot ùì¢ , ùüô-bounded-env-wfe qbe ùìî-wft , ùüô-bounded-env-wfe qbe ùìî-wft }
      ; ‚Üëwf-ùìó = wf-ùìó
      ; ‚Üëwf-ùì¢ = wf-ùì¢
      }
eval-soundness {Œ£‚Çï = Œ£‚Çï}{Œ£‚Çõ = Œ£‚Çõ}{ùì¢ = ùì¢} ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-refl (TAbs {q = ùüö} ‚ä¢e qbdd {wf‚ÇÅ}{wf‚ÇÇ}) (EAbs ‚â§-refl wfc‚ÇÇ refl qbe)
  rewrite ùüö-bounded-env qbe
  = record
      { ‚ÜëŒ£‚Çï‚Ä≤ = Œ£‚Çï
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-refl
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ
      ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-refl
      ; ‚Üë‚ä¢v = TVClos (Œª ùì¢‚Ä≤ ùì¢‚âº ‚Üí ‚ä®-adjust-‚âº‚Çõ ùì¢‚âº (restrict‚Ä≤ ‚ä®ùìî qbdd)) refl (is-bounded qbdd) ‚ä¢e wf‚ÇÅ wf‚ÇÇ <‚¶Ç-refl
      ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢
      ; ‚Üëùì¢‚âº = ‚âº‚Çõ-refl {ùì¢}
      ; ‚Üëcls = WFV Œª{ refl ‚Üí (Œª()) , ‚âº‚Çõ-refl {ùì¢} , ùìî-wft , ùìî-wft } 
      ; ‚Üëwf-ùìó = wf-ùìó
      ; ‚Üëwf-ùì¢ = wf-ùì¢
      }

-- application

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TApp ‚ä¢e ‚ä¢e‚ÇÅ) (EApp {ùì¢ = ùì¢}{q = ùüô} {q‚ÇÅ = ùüô}{ùì¢‚Ä≤ = ùì¢‚Ä≤}{ùì¢‚Ä≥ = ùì¢‚Ä≥} q‚ÇÇ‚â§q ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ refl)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft  wf-ùìó wf-ùì¢ ‚â§-top ‚ä¢e ‚áì
... | ih@record { ‚ÜëŒ£‚Çï‚Ä≤ = ‚ÜëŒ£‚Çï‚Ä≤‚ÇÅ ; ‚ÜëŒ£‚Çõ‚Ä≤ = ‚ÜëŒ£‚Çõ‚Ä≤‚ÇÅ ; ‚ÜëŒ£‚âº‚Çï = ‚ÜëŒ£‚âº‚Çï‚ÇÅ ; ‚ÜëŒ£‚âº‚Çõ = ‚ÜëŒ£‚âº‚Çõ‚ÇÅ ; ‚Üë‚ä¢v = TVClos {x = X s _} {S‚ÇÅ‚â§x = S‚ÇÅ‚â§x} ‚àÄ‚ä®ùìî refl qbd ‚ä¢e‚ÇÇ wf‚ÇÅ ‚â§-refl (SQual qsub (SFun {S‚ÇÉ = S‚ÇÉ}{S‚ÇÅ = S‚ÇÅ@ (T‚ÇÅ ^ ùüô)}{S‚ÇÇ = S‚ÇÇ@ (T‚ÇÇ ^ ùüô)}{S‚ÇÑ = S‚ÇÑ} S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÉ<‚¶ÇS‚ÇÑ)) ; ‚Üë‚ä¢ùìó = ‚Üë‚ä¢ùìó‚ÇÅ ; ‚Üë‚ä¢ùì¢ = ‚Üë‚ä¢ùì¢‚ÇÅ ; ‚Üëùì¢‚âº = ‚Üëùì¢‚âº‚ÇÅ ; ‚Üëcls = ‚Üëcls‚ÇÅ ; ‚Üëwf-ùìó = ‚Üëwf-ùìó‚ÇÅ ; ‚Üëwf-ùì¢ = ‚Üëwf-ùì¢‚ÇÅ }
  with eval-soundness (‚Üë‚ä¢ùìó ih) (‚Üë‚ä¢ùì¢ ih)
                      (‚ä®-extend (‚ÜëŒ£‚âº‚Çï ih) (‚ÜëŒ£‚âº‚Çõ ih) (‚Üëùì¢‚âº ih) ‚ä®ùìî)
                      (wfe-ext-‚âº‚Çõ (‚Üëùì¢‚âº ih) ùìî-wft)
                      (‚Üëwf-ùìó ih)
                      (‚Üëwf-ùì¢ ih)
                      (‚â§-trans (q-of-mono S‚ÇÅ<‚¶ÇS‚ÇÇ) wf‚ÇÅ)
                      ‚ä¢e‚ÇÅ ‚áì‚ÇÅ
... | ih‚ÇÅ@record { ‚ÜëŒ£‚Çï‚Ä≤ = Œ£‚Çï‚Ä≥ ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ‚Ä≥ ; ‚ÜëŒ£‚âº‚Çï = Œ£‚âº‚Çï‚Ä≥ ; ‚ÜëŒ£‚âº‚Çõ = Œ£‚âº‚Çõ‚Ä≥ ; ‚Üë‚ä¢v = ‚ä¢varg ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó‚Ä≥ ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢‚Ä≥ ; ‚Üëùì¢‚âº = ùì¢‚âº‚Ä≥ }
  using ‚ä®ùìî‚Ä≥ ‚Üê ‚àÄ‚ä®ùìî (mkS [] []) (‚âº‚Çõ-refl {mkS [] []})
  using ‚ä®ùìî‚Ä≥+arg ‚Üê ‚ä®-extend-ùüô {S‚ÇÅ‚â§x = S‚ÇÅ‚â§x} s T‚ÇÅ (<‚¶Ç-val-lift ‚ä¢varg S‚ÇÅ<‚¶ÇS‚ÇÇ) (‚ä®-extend-Œ£ Œ£‚âº‚Çï‚Ä≥ Œ£‚âº‚Çõ‚Ä≥ ‚ä®ùìî‚Ä≥)
  using WFV wfv ‚Üê ‚Üëcls ih
  using qfun , ùì¢·∂ú‚âº , wfe0 , wfe ‚Üê wfv refl
  with eval-soundness ‚ä¢ùìó‚Ä≥ []
                      (‚ä®-adjust-ùüô (qb-add ‚â§-refl qbd) ‚ä®ùìî‚Ä≥+arg)
                      (let qvarg‚â°ùüô = (ùüô-value ‚ä¢varg S‚ÇÅ<‚¶ÇS‚ÇÇ) in wf-ext-ùüô qvarg‚â°ùüô (ùüô-bounded-val-wfv qvarg‚â°ùüô (‚Üëcls ih‚ÇÅ)) wfe0)
                      (wfh-wfh (‚Üëwf-ùìó ih‚ÇÅ))
                      wfs0
                      q‚ÇÇ‚â§q
                      ‚ä¢e‚ÇÇ ‚áì‚ÇÇ
... | ih‚ÇÇ
  = record
      { ‚ÜëŒ£‚Çï‚Ä≤ = ‚ÜëŒ£‚Çï‚Ä≤ ih‚ÇÇ
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ‚Ä≥
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-trans (‚ÜëŒ£‚âº‚Çï ih) (‚âº-trans Œ£‚âº‚Çï‚Ä≥ (‚ÜëŒ£‚âº‚Çï ih‚ÇÇ))
      ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-trans (‚ÜëŒ£‚âº‚Çõ ih) Œ£‚âº‚Çõ‚Ä≥
      ; ‚Üë‚ä¢v = <‚¶Ç-val-lift (‚ä¢·µ•-adjust-ùüô (‚Üë‚ä¢v ih‚ÇÇ)) S‚ÇÉ<‚¶ÇS‚ÇÑ
      ; ‚Üë‚ä¢ùìó = ‚Üë‚ä¢ùìó ih‚ÇÇ
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢‚Çõ-adjust-‚âº‚Çï{ùì¢ = ùì¢‚Ä≥} (‚ÜëŒ£‚âº‚Çï ih‚ÇÇ) ‚ä¢ùì¢‚Ä≥
      ; ‚Üëùì¢‚âº = ‚âº‚Çõ-trans{ùì¢‚ÇÅ = ùì¢}{ùì¢‚ÇÇ = ùì¢‚Ä≤}{ùì¢‚ÇÉ = ùì¢‚Ä≥} (‚Üëùì¢‚âº ih) (‚Üëùì¢‚âº ih‚ÇÅ)
      ; ‚Üëcls = ùüô-bounded-val-wfv (ùüô-value (‚Üë‚ä¢v ih‚ÇÇ) <‚¶Ç-refl) (‚Üëcls ih‚ÇÇ)
      ; ‚Üëwf-ùìó = wfh-wfh (‚Üëwf-ùìó ih‚ÇÇ)
      ; ‚Üëwf-ùì¢ = ih‚ÇÅ .‚Üëwf-ùì¢
      }

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TApp ‚ä¢e ‚ä¢e‚ÇÅ) (EApp {ùì¢ = ùì¢}{q = ùüö} {q‚ÇÅ = ùüô}{ùì¢‚Ä≤ = ùì¢‚Ä≤}{ùì¢‚Ä≥ = ùì¢‚Ä≥}{ùì¢‚Ä¥ = ùì¢‚Ä¥} q‚ÇÇ‚â§q ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ refl)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft  wf-ùìó wf-ùì¢ ‚â§-top ‚ä¢e ‚áì
... | ih@record { ‚ÜëŒ£‚Çï‚Ä≤ = ‚ÜëŒ£‚Çï‚Ä≤‚ÇÅ ; ‚ÜëŒ£‚Çõ‚Ä≤ = ‚ÜëŒ£‚Çõ‚Ä≤‚ÇÅ ; ‚ÜëŒ£‚âº‚Çï = ‚ÜëŒ£‚âº‚Çï‚ÇÅ ; ‚ÜëŒ£‚âº‚Çõ = ‚ÜëŒ£‚âº‚Çõ‚ÇÅ ; ‚Üë‚ä¢v = TVClos {ùì¢ = ùì¢·∂ú} {x = X s _} {S‚ÇÅ‚â§x = refl} ‚àÄ‚ä®ùìî ùì¢‚â° qbd ‚ä¢e‚ÇÇ wf‚ÇÅ wf‚ÇÇ (SQual qsub (SFun {S‚ÇÉ = S‚ÇÉ}{S‚ÇÅ = S‚ÇÅ@ (T‚ÇÅ ^ ùüô)}{S‚ÇÇ = S‚ÇÇ}{S‚ÇÑ = S‚ÇÑ} S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÉ<‚¶ÇS‚ÇÑ)) ; ‚Üë‚ä¢ùìó = ‚Üë‚ä¢ùìó‚ÇÅ ; ‚Üë‚ä¢ùì¢ = ‚Üë‚ä¢ùì¢‚ÇÅ ; ‚Üëùì¢‚âº = ‚Üëùì¢‚âº‚ÇÅ ; ‚Üëcls = ‚Üëcls‚ÇÅ ; ‚Üëwf-ùìó = ‚Üëwf-ùìó‚ÇÅ ; ‚Üëwf-ùì¢ = ‚Üëwf-ùì¢‚ÇÅ }
  with eval-soundness (‚Üë‚ä¢ùìó ih) (‚Üë‚ä¢ùì¢ ih)
                      (‚ä®-extend (‚ÜëŒ£‚âº‚Çï ih) (‚ÜëŒ£‚âº‚Çõ ih) (‚Üëùì¢‚âº ih) ‚ä®ùìî)
                      (wfe-ext-‚âº‚Çõ (‚Üëùì¢‚âº ih) ùìî-wft)
                      (‚Üëwf-ùìó ih)
                      (‚Üëwf-ùì¢ ih)
                      (q-of-mono S‚ÇÅ<‚¶ÇS‚ÇÇ)
                      ‚ä¢e‚ÇÅ ‚áì‚ÇÅ
... | ih‚ÇÅ@record { ‚ÜëŒ£‚Çï‚Ä≤ = Œ£‚Çï‚Ä≥ ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ‚Ä≥ ; ‚ÜëŒ£‚âº‚Çï = Œ£‚âº‚Çï‚Ä≥ ; ‚ÜëŒ£‚âº‚Çõ = Œ£‚âº‚Çõ‚Ä≥ ; ‚Üë‚ä¢v = ‚ä¢varg ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó‚Ä≥ ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢‚Ä≥ ; ‚Üëùì¢‚âº = ùì¢‚âº‚Ä≥ }
  using WFV wfv ‚Üê ‚Üëcls ih
  using qfun , ùì¢·∂ú‚âº , wfe0 , wfe ‚Üê wfv refl
  using ‚ä®ùìî‚Ä≥ ‚Üê ‚àÄ‚ä®ùìî ùì¢‚Ä≥ (‚âº‚Çõ-trans{ùì¢‚ÇÅ = ùì¢·∂ú}{ùì¢‚ÇÇ = ùì¢‚Ä≤}{ùì¢‚ÇÉ = ùì¢‚Ä≥} ùì¢·∂ú‚âº (ùì¢‚âº‚Ä≥))
  using ‚ä®ùìî‚Ä≥+arg ‚Üê ‚ä®-extend {ùì¢ = ùì¢‚Ä≥}{ùì¢‚Ä≤ = ùì¢‚Ä≥} Œ£‚âº‚Çï‚Ä≥ Œ£‚âº‚Çõ‚Ä≥ (‚âº‚Çõ-refl {ùì¢‚Ä≥}) ‚ä®ùìî‚Ä≥
  with eval-soundness ‚ä¢ùìó‚Ä≥ ‚ä¢ùì¢‚Ä≥
                      (‚ä®-extend-ùüô s T‚ÇÅ (<‚¶Ç-val-lift ‚ä¢varg S‚ÇÅ<‚¶ÇS‚ÇÇ) ‚ä®ùìî‚Ä≥+arg)
                      (wf-ext-ùüô (ùüô-value ‚ä¢varg S‚ÇÅ<‚¶ÇS‚ÇÇ) (‚Üëcls ih‚ÇÅ) (wfe-ext-‚âº‚Çõ ùì¢‚âº‚Ä≥ wfe))
                      (‚Üëwf-ùìó ih‚ÇÅ)
                      (‚Üëwf-ùì¢ ih‚ÇÅ)
                      q‚ÇÇ‚â§q
                      ‚ä¢e‚ÇÇ ‚áì‚ÇÇ
... | ih‚ÇÇ
  = record
      { ‚ÜëŒ£‚Çï‚Ä≤ = ih‚ÇÇ .‚ÜëŒ£‚Çï‚Ä≤
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = ih‚ÇÇ .‚ÜëŒ£‚Çõ‚Ä≤
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-trans (‚ÜëŒ£‚âº‚Çï ih) (‚âº-trans Œ£‚âº‚Çï‚Ä≥ (‚ÜëŒ£‚âº‚Çï ih‚ÇÇ))
      ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-trans (‚ÜëŒ£‚âº‚Çõ ih) (‚âº-trans (‚ÜëŒ£‚âº‚Çõ ih‚ÇÅ) (‚ÜëŒ£‚âº‚Çõ ih‚ÇÇ))
      ; ‚Üë‚ä¢v = <‚¶Ç-val-lift (ih‚ÇÇ .‚Üë‚ä¢v) S‚ÇÉ<‚¶ÇS‚ÇÑ
      ; ‚Üë‚ä¢ùìó = ih‚ÇÇ .‚Üë‚ä¢ùìó
      ; ‚Üë‚ä¢ùì¢ = ih‚ÇÇ .‚Üë‚ä¢ùì¢
      ; ‚Üëùì¢‚âº = ‚âº‚Çõ-trans {ùì¢‚ÇÅ = ùì¢} {ùì¢‚ÇÇ = ùì¢‚Ä≤}{ùì¢‚ÇÉ = ùì¢‚Ä¥} (ih .‚Üëùì¢‚âº) (‚âº‚Çõ-trans {ùì¢‚ÇÅ = ùì¢‚Ä≤} {ùì¢‚ÇÇ = ùì¢‚Ä≥}{ùì¢‚ÇÉ = ùì¢‚Ä¥} (ih‚ÇÅ .‚Üëùì¢‚âº) (ih‚ÇÇ .‚Üëùì¢‚âº))
      ; ‚Üëcls = ih‚ÇÇ .‚Üëcls
      ; ‚Üëwf-ùìó = ih‚ÇÇ .‚Üëwf-ùìó
      ; ‚Üëwf-ùì¢ = ih‚ÇÇ .‚Üëwf-ùì¢
      }

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TApp ‚ä¢e ‚ä¢e‚ÇÅ) (EApp {ùì¢ = ùì¢}{q = ùüö} {q‚ÇÅ = ùüö}{ùì¢‚Ä≤ = ùì¢‚Ä≤}{v‚ÇÇ = v‚ÇÇ}{ùì¢‚Ä≥ = ùì¢‚Ä≥}{ùì¢‚Ä¥ = ùì¢‚Ä¥} q‚ÇÇ‚â§q ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ refl)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft  wf-ùìó wf-ùì¢ ‚â§-top ‚ä¢e ‚áì
... | ih@record { ‚ÜëŒ£‚Çï‚Ä≤ = ‚ÜëŒ£‚Çï‚Ä≤‚ÇÅ ; ‚ÜëŒ£‚Çõ‚Ä≤ = ‚ÜëŒ£‚Çõ‚Ä≤‚ÇÅ ; ‚ÜëŒ£‚âº‚Çï = ‚ÜëŒ£‚âº‚Çï‚ÇÅ ; ‚ÜëŒ£‚âº‚Çõ = ‚ÜëŒ£‚âº‚Çõ‚ÇÅ ; ‚Üë‚ä¢v = TVClos {ùì¢ = ùì¢·∂ú} {x = X s _} {S‚ÇÅ‚â§x = S‚ÇÅ‚â§x} ‚àÄ‚ä®ùìî ùì¢‚â° qbd ‚ä¢e‚ÇÇ wf‚ÇÅ wf‚ÇÇ (SQual qsub (SFun {S‚ÇÉ = S‚ÇÉ}{S‚ÇÅ = S‚ÇÅ}{S‚ÇÇ = S‚ÇÇ}{S‚ÇÑ = S‚ÇÑ} S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÉ<‚¶ÇS‚ÇÑ)) ; ‚Üë‚ä¢ùìó = ‚Üë‚ä¢ùìó‚ÇÅ ; ‚Üë‚ä¢ùì¢ = ‚Üë‚ä¢ùì¢‚ÇÅ ; ‚Üëùì¢‚âº = ‚Üëùì¢‚âº‚ÇÅ ; ‚Üëcls = ‚Üëcls‚ÇÅ ; ‚Üëwf-ùìó = ‚Üëwf-ùìó‚ÇÅ ; ‚Üëwf-ùì¢ = ‚Üëwf-ùì¢‚ÇÅ }
  with eval-soundness (‚Üë‚ä¢ùìó ih) (‚Üë‚ä¢ùì¢ ih)
                      (‚ä®-extend (‚ÜëŒ£‚âº‚Çï ih) (‚ÜëŒ£‚âº‚Çõ ih) (‚Üëùì¢‚âº ih) ‚ä®ùìî)
                      (wfe-ext-‚âº‚Çõ (‚Üëùì¢‚âº ih) ùìî-wft)
                      (‚Üëwf-ùìó ih)
                      (‚Üëwf-ùì¢ ih)
                      ‚â§-top
                      ‚ä¢e‚ÇÅ ‚áì‚ÇÅ
... | ih‚ÇÅ@record { ‚ÜëŒ£‚Çï‚Ä≤ = Œ£‚Çï‚Ä≥ ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ‚Ä≥ ; ‚ÜëŒ£‚âº‚Çï = Œ£‚âº‚Çï‚Ä≥ ; ‚ÜëŒ£‚âº‚Çõ = Œ£‚âº‚Çõ‚Ä≥ ; ‚Üë‚ä¢v = ‚ä¢varg ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó‚Ä≥ ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢‚Ä≥ ; ‚Üëùì¢‚âº = ùì¢‚âº‚Ä≥ }
  using WFV wfv ‚Üê ‚Üëcls ih
  using qfun , ùì¢·∂ú‚âºùì¢‚Ä≤ , wfe0 , wfe ‚Üê wfv refl
  using ‚ä®ùìî‚Ä≥ ‚Üê ‚àÄ‚ä®ùìî ùì¢‚Ä≥ (‚âº‚Çõ-trans{ùì¢‚ÇÅ = ùì¢·∂ú}{ùì¢‚ÇÇ = ùì¢‚Ä≤}{ùì¢‚ÇÉ = ùì¢‚Ä≥} ùì¢·∂ú‚âºùì¢‚Ä≤ (ùì¢‚âº‚Ä≥))
  using ‚ä®ùìî‚Ä≥+arg ‚Üê ‚ä®-extend {ùì¢ = ùì¢‚Ä≥}{ùì¢‚Ä≤ = ùì¢‚Ä≥} Œ£‚âº‚Çï‚Ä≥ Œ£‚âº‚Çõ‚Ä≥ (‚âº‚Çõ-refl {ùì¢‚Ä≥}) ‚ä®ùìî‚Ä≥
  with eval-soundness ‚ä¢ùìó‚Ä≥
                      (‚ä¢‚Çõ-adjust-push {ùì¢ = ùì¢‚Ä≥} {vs = [ v‚ÇÇ ]}‚ä¢ùì¢‚Ä≥)
                      (‚ä®-adjust-push-update s (<‚¶Ç-val-lift ‚ä¢varg S‚ÇÅ<‚¶ÇS‚ÇÇ) ‚ä®ùìî‚Ä≥+arg ) -- (‚ä®-extend-ùüô s T‚ÇÅ (<‚¶Ç-val-lift ‚ä¢varg S‚ÇÅ<‚¶ÇS‚ÇÇ) ‚ä®ùìî‚Ä≥+arg)
                      (wfe-push s (ih‚ÇÅ .‚Üëcls) (wfe-ext-‚âº‚Çõ ùì¢‚âº‚Ä≥ wfe)) -- (wf-ext-ùüô (ùüô-value ‚ä¢varg S‚ÇÅ<‚¶ÇS‚ÇÇ) (‚Üëcls ih‚ÇÅ) (wfe-ext-‚âº‚Çõ ùì¢‚âº‚Ä≥ wfe))
                      (wfh-wfh (‚Üëwf-ùìó ih‚ÇÅ))
                      (wfs-push (‚Üëwf-ùì¢ ih‚ÇÅ))
                      q‚ÇÇ‚â§q
                      ‚ä¢e‚ÇÇ
                      ‚áì‚ÇÇ
... | ih‚ÇÇ
  = record
      { ‚ÜëŒ£‚Çï‚Ä≤ = ih‚ÇÇ .‚ÜëŒ£‚Çï‚Ä≤
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = ih‚ÇÇ .‚ÜëŒ£‚Çõ‚Ä≤
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-trans (ih .‚ÜëŒ£‚âº‚Çï) (‚âº-trans (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çï) (ih‚ÇÇ .‚ÜëŒ£‚âº‚Çï))
      ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-trans (ih .‚ÜëŒ£‚âº‚Çõ) (‚âº-trans (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çõ) (ih‚ÇÇ .‚ÜëŒ£‚âº‚Çõ))
      ; ‚Üë‚ä¢v = <‚¶Ç-val-lift (ih‚ÇÇ .‚Üë‚ä¢v) S‚ÇÉ<‚¶ÇS‚ÇÑ
      ; ‚Üë‚ä¢ùìó = ih‚ÇÇ .‚Üë‚ä¢ùìó
      ; ‚Üë‚ä¢ùì¢ = ih‚ÇÇ .‚Üë‚ä¢ùì¢
      ; ‚Üëùì¢‚âº = ‚âº‚Çõ-trans {ùì¢‚ÇÅ = ùì¢} {ùì¢‚ÇÇ = ùì¢‚Ä≤} {ùì¢‚ÇÉ = ùì¢‚Ä¥} (ih .‚Üëùì¢‚âº) (‚âº‚Çõ-trans {ùì¢‚ÇÅ = ùì¢‚Ä≤} {ùì¢‚ÇÇ = ùì¢‚Ä≥} {ùì¢‚ÇÉ = ùì¢‚Ä¥} (ih‚ÇÅ .‚Üëùì¢‚âº) (‚âº‚Çõ-trans{ùì¢‚ÇÅ = ùì¢‚Ä≥}{ùì¢‚ÇÇ = push ùì¢‚Ä≥ v‚ÇÇ}{ùì¢‚ÇÉ = ùì¢‚Ä¥} (‚âº‚Çõ-push {ùì¢ = ùì¢‚Ä≥}) (ih‚ÇÇ .‚Üëùì¢‚âº)))
      ; ‚Üëcls = ih‚ÇÇ .‚Üëcls
      ; ‚Üëwf-ùìó = ih‚ÇÇ .‚Üëwf-ùìó
      ; ‚Üëwf-ùì¢ = ih‚ÇÇ .‚Üëwf-ùì¢
      }

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TApp ‚ä¢e ‚ä¢e‚ÇÅ) (EApp {ùì¢ = ùì¢}{q = ùüô} {q‚ÇÅ = ùüö}{ùì¢‚Ä≤ = ùì¢‚Ä≤}{v‚ÇÇ = v‚ÇÇ}{ùì¢‚Ä≥ = ùì¢‚Ä≥}{ùì¢‚Ä¥ = ùì¢‚Ä¥} q‚ÇÇ‚â§q ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ refl)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft  wf-ùìó wf-ùì¢ ‚â§-top ‚ä¢e ‚áì
... | ih@record { ‚ÜëŒ£‚Çï‚Ä≤ = ‚ÜëŒ£‚Çï‚Ä≤‚ÇÅ ; ‚ÜëŒ£‚Çõ‚Ä≤ = ‚ÜëŒ£‚Çõ‚Ä≤‚ÇÅ ; ‚ÜëŒ£‚âº‚Çï = ‚ÜëŒ£‚âº‚Çï‚ÇÅ ; ‚ÜëŒ£‚âº‚Çõ = ‚ÜëŒ£‚âº‚Çõ‚ÇÅ ; ‚Üë‚ä¢v = TVClos {ùì¢ = ùì¢·∂ú} {x = X s _} {S‚ÇÅ‚â§x = S‚ÇÅ‚â§x} ‚àÄ‚ä®ùìî refl qbd ‚ä¢e‚ÇÇ ‚â§-refl ‚â§-refl (SQual qsub (SFun {S‚ÇÉ = S‚ÇÉ}{S‚ÇÅ = S‚ÇÅ}{S‚ÇÇ = S‚ÇÇ}{S‚ÇÑ = S‚ÇÑ} S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÉ<‚¶ÇS‚ÇÑ)) ; ‚Üë‚ä¢ùìó = ‚Üë‚ä¢ùìó‚ÇÅ ; ‚Üë‚ä¢ùì¢ = ‚Üë‚ä¢ùì¢‚ÇÅ ; ‚Üëùì¢‚âº = ‚Üëùì¢‚âº‚ÇÅ ; ‚Üëcls = ‚Üëcls‚ÇÅ ; ‚Üëwf-ùìó = ‚Üëwf-ùìó‚ÇÅ ; ‚Üëwf-ùì¢ = ‚Üëwf-ùì¢‚ÇÅ }
  with eval-soundness (‚Üë‚ä¢ùìó ih) (‚Üë‚ä¢ùì¢ ih)
                      (‚ä®-extend (‚ÜëŒ£‚âº‚Çï ih) (‚ÜëŒ£‚âº‚Çõ ih) (‚Üëùì¢‚âº ih) ‚ä®ùìî)
                      (wfe-ext-‚âº‚Çõ (‚Üëùì¢‚âº ih) ùìî-wft)
                      (‚Üëwf-ùìó ih)
                      (‚Üëwf-ùì¢ ih)
                      ‚â§-top
                      ‚ä¢e‚ÇÅ ‚áì‚ÇÅ
... | ih‚ÇÅ@record { ‚ÜëŒ£‚Çï‚Ä≤ = Œ£‚Çï‚Ä≥ ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ‚Ä≥ ; ‚ÜëŒ£‚âº‚Çï = Œ£‚âº‚Çï‚Ä≥ ; ‚ÜëŒ£‚âº‚Çõ = Œ£‚âº‚Çõ‚Ä≥ ; ‚Üë‚ä¢v = ‚ä¢varg ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó‚Ä≥ ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢‚Ä≥ ; ‚Üëùì¢‚âº = ùì¢‚âº‚Ä≥ }
  using WFV wfv ‚Üê ‚Üëcls ih
  using qfun , ùì¢·∂ú‚âº , wfe0 , wfe ‚Üê wfv refl
  with refl , hpe-ùìî‚Ä≤ ‚Üê qfun refl
  using ‚ä®ùìî‚Ä≥ ‚Üê ‚àÄ‚ä®ùìî ùì¢‚àÖ (‚âº‚Çõ-refl {ùì¢‚àÖ})
  using ‚ä®ùìî‚Ä¥ ‚Üê ‚ä®-extend-Œ£ Œ£‚âº‚Çï‚Ä≥ Œ£‚âº‚Çõ‚Ä≥ ‚ä®ùìî‚Ä≥
--   using ‚ä®ùìî‚Ä≥+arg ‚Üê ùüô-env-no-stack (‚ä®-extend {ùì¢ = ùì¢‚àÖ}{ùì¢‚Ä≤ = ùì¢‚àÖ} Œ£‚âº‚Çï‚Ä≥ {!!} (‚âº‚Çõ-refl {ùì¢‚àÖ}) ‚ä®ùìî‚Ä≥) qbd
  with eval-soundness {Œ£‚Çõ = []}
                      ‚ä¢ùìó‚Ä≥
                      []
                      (‚ä®-adjust-push-update s (ùüô-value-no-stack (<‚¶Ç-val-lift ‚ä¢varg S‚ÇÅ<‚¶ÇS‚ÇÇ) refl) (ùüô-env-no-stack ‚ä®ùìî‚Ä¥ qbd))
                      (wfe-push{ùì¢ = ùì¢‚àÖ} s (ùüô-bounded-val-wfv (ùüô-value ‚ä¢varg S‚ÇÅ<‚¶ÇS‚ÇÇ) (ih‚ÇÅ .‚Üëcls)) (ùüô-bounded-env-wfe (heap-env‚áíùüô-bounded-env hpe-ùìî‚Ä≤) wfe))
                      (wfh-wfh (‚Üëwf-ùìó ih‚ÇÅ))
                      (WFL (Œª{ ()}))
                      ‚â§-bot
                      ‚ä¢e‚ÇÇ
                      ‚áì‚ÇÇ
... | ih‚ÇÇ
  = record
      { ‚ÜëŒ£‚Çï‚Ä≤ = ih‚ÇÇ .‚ÜëŒ£‚Çï‚Ä≤
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = ih‚ÇÅ .‚ÜëŒ£‚Çõ‚Ä≤
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-trans (ih .‚ÜëŒ£‚âº‚Çï) (‚âº-trans (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çï) (ih‚ÇÇ .‚ÜëŒ£‚âº‚Çï))
      ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-trans (ih .‚ÜëŒ£‚âº‚Çõ) (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çõ)
      ; ‚Üë‚ä¢v =  <‚¶Ç-val-lift (‚ä¢·µ•-adjust-ùüô (ih‚ÇÇ .‚Üë‚ä¢v)) S‚ÇÉ<‚¶ÇS‚ÇÑ
      ; ‚Üë‚ä¢ùìó = ih‚ÇÇ .‚Üë‚ä¢ùìó
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢‚Çõ-adjust-‚âº‚Çï{ùì¢ = ùì¢‚Ä≥} (ih‚ÇÇ .‚ÜëŒ£‚âº‚Çï) (ih‚ÇÅ .‚Üë‚ä¢ùì¢)
      ; ‚Üëùì¢‚âº = ‚âº‚Çõ-trans {ùì¢‚ÇÅ = ùì¢} {ùì¢‚ÇÇ = ùì¢‚Ä≤} {ùì¢‚ÇÉ = ùì¢‚Ä≥} (ih .‚Üëùì¢‚âº) (ih‚ÇÅ .‚Üëùì¢‚âº)
      ; ‚Üëcls = ùüô-bounded-val-wfv (ùüô-value (ih‚ÇÇ .‚Üë‚ä¢v) <‚¶Ç-refl) (ih‚ÇÇ .‚Üëcls)
      ; ‚Üëwf-ùìó = wfh-wfh (ih‚ÇÇ .‚Üëwf-ùìó)
      ; ‚Üëwf-ùì¢ = ih‚ÇÅ .‚Üëwf-ùì¢
      }


-- unit / constants

eval-soundness {Œ£‚Çï} {Œ£‚Çõ = Œ£‚Çõ} {ùì¢ = ùì¢} ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q TUnit EUnit
  = record
      { ‚ÜëŒ£‚Çï‚Ä≤ = Œ£‚Çï
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-refl
      ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-refl
      ; ‚Üë‚ä¢v = TVUnit
      ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢
      ; ‚Üëùì¢‚âº = ‚âº‚Çõ-refl {ùì¢}
      ; ‚Üëcls = WFV (Œª ())
      ; ‚Üëwf-ùìó = wf-ùìó
      ; ‚Üëwf-ùì¢ = wf-ùì¢
      }

-- variables


eval-soundness {Œ£‚Çï = Œ£‚Çï}{Œ£‚Çõ = Œ£‚Çõ} ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-bottop (TVar x) (EVar {ùì¢ = ùì¢} (on-heap acc) refl)
  = let ‚ä¢v = access-soundness ‚ä®ùìî x acc in
    record
      { ‚ÜëŒ£‚Çï‚Ä≤ = Œ£‚Çï
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-refl
      ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-refl
      ; ‚Üë‚ä¢v = ‚ä¢v
      ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢
      ; ‚Üëùì¢‚âº = ‚âº‚Çõ-refl {ùì¢}
      ; ‚Üëcls = wf-access ùìî-wft acc
      ; ‚Üëwf-ùìó = wf-ùìó
      ; ‚Üëwf-ùì¢ = wf-ùì¢
      }
eval-soundness {Œ£‚Çï = Œ£‚Çï}{Œ£‚Çõ = Œ£‚Çõ} ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-refl (TVar x‚àà) (EVar {ùì¢ = ùì¢} (on-heap acc) refl)
  = let ‚ä¢v = genaccess-soundness ‚ä®ùìî x‚àà (on-heap acc) in
    record
      { ‚ÜëŒ£‚Çï‚Ä≤ = Œ£‚Çï
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-refl
      ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-refl
      ; ‚Üë‚ä¢v = ‚ä¢v
      ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢
      ; ‚Üëùì¢‚âº = ‚âº‚Çõ-refl {ùì¢}
      ; ‚Üëcls = wf-access ùìî-wft acc
      ; ‚Üëwf-ùìó = wf-ùìó
      ; ‚Üëwf-ùì¢ = wf-ùì¢
      }
eval-soundness {Œ£‚Çï = Œ£‚Çï}{Œ£‚Çõ = Œ£‚Çõ} ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TVar x‚àà) (EVar {ùì¢ = ùì¢} (on-stack sacc) dec‚â°)
  = let ‚ä¢v = genaccess-soundness-ùüö ‚ä®ùìî x‚àà (on-stack sacc) _ dec‚â° in
    record
      { ‚ÜëŒ£‚Çï‚Ä≤ = Œ£‚Çï
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-refl
      ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-refl
      ; ‚Üë‚ä¢v = ‚ä¢v
      ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢
      ; ‚Üëùì¢‚âº = ‚âº‚Çõ-refl {ùì¢}
      ; ‚Üëcls = wf-saccess ùìî-wft sacc dec‚â°
      ; ‚Üëwf-ùìó = wf-ùìó
      ; ‚Üëwf-ùì¢ = wf-ùì¢
      }

-- sequence

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TSeq ‚ä¢e ‚ä¢e‚ÇÅ) (ESeq {ùì¢ = ùì¢}{ùì¢‚Ä≤ = ùì¢‚Ä≤}{ùì¢‚Ä≥ = ùì¢‚Ä≥} ‚áì ‚áì‚ÇÅ)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-refl ‚ä¢e ‚áì
... | ih
  with eval-soundness (‚Üë‚ä¢ùìó ih) (‚Üë‚ä¢ùì¢ ih) (‚ä®-extend (‚ÜëŒ£‚âº‚Çï ih) (‚ÜëŒ£‚âº‚Çõ ih) (‚Üëùì¢‚âº ih) ‚ä®ùìî) (wfe-ext-‚âº‚Çõ (‚Üëùì¢‚âº ih) ùìî-wft) (‚Üëwf-ùìó ih) (‚Üëwf-ùì¢ ih) ‚â§-q ‚ä¢e‚ÇÅ ‚áì‚ÇÅ
... | ih‚ÇÅ
  = record
      { ‚ÜëŒ£‚Çï‚Ä≤ = ‚ÜëŒ£‚Çï‚Ä≤ ih‚ÇÅ
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = ‚ÜëŒ£‚Çõ‚Ä≤ ih‚ÇÅ
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-trans (‚ÜëŒ£‚âº‚Çï ih) (‚ÜëŒ£‚âº‚Çï ih‚ÇÅ) 
      ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-trans (‚ÜëŒ£‚âº‚Çõ ih) (‚ÜëŒ£‚âº‚Çõ ih‚ÇÅ)
      ; ‚Üë‚ä¢v = ‚Üë‚ä¢v ih‚ÇÅ
      ; ‚Üë‚ä¢ùìó = ih‚ÇÅ .‚Üë‚ä¢ùìó
      ; ‚Üë‚ä¢ùì¢ = ih‚ÇÅ .‚Üë‚ä¢ùì¢
      ; ‚Üëùì¢‚âº = ‚âº‚Çõ-trans {ùì¢‚ÇÅ = ùì¢}{ùì¢‚ÇÇ = ùì¢‚Ä≤}{ùì¢‚ÇÉ = ùì¢‚Ä≥} (ih .‚Üëùì¢‚âº) (ih‚ÇÅ .‚Üëùì¢‚âº)
      ; ‚Üëcls = ih‚ÇÅ .‚Üëcls
      ; ‚Üëwf-ùìó = ‚Üëwf-ùìó ih‚ÇÅ
      ; ‚Üëwf-ùì¢ = ‚Üëwf-ùì¢ ih‚ÇÅ
      }

-- reference

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TRef {S = S} {wf = ‚â§-refl} ‚ä¢e) (ERef {q = ùüô}{ùì¢ = ùì¢}{ùì¢‚Ä≤ = ùì¢‚Ä≤} ‚â§-refl ‚áì (refl , refl , refl))
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-refl ‚ä¢e ‚áì
... | ih
  rewrite sym (‚ä¢‚Çï-length (ih .‚Üë‚ä¢ùìó))
  = let T = t-of S in
    record
      { ‚ÜëŒ£‚Çï‚Ä≤ = ih .‚ÜëŒ£‚Çï‚Ä≤ ++ [ T ]
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = ih .‚ÜëŒ£‚Çõ‚Ä≤
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-trans (ih .‚ÜëŒ£‚âº‚Çï) ([ T ] , refl)
      ; ‚ÜëŒ£‚âº‚Çõ = ih .‚ÜëŒ£‚âº‚Çõ
      ; ‚Üë‚ä¢v = TVRef (length-< T (ih .‚ÜëŒ£‚Çï‚Ä≤) []) (lookup-last T (ih .‚ÜëŒ£‚Çï‚Ä≤)) <‚¶Ç-refl
      ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó-extend-ùüô T (‚ä¢v-stack-ùüô (‚Üë‚ä¢v ih)) (‚Üë‚ä¢ùìó ih)
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢-extend-ùüô {ùì¢ = ùì¢‚Ä≤} T (ih .‚Üë‚ä¢ùì¢)
      ; ‚Üëùì¢‚âº = ih .‚Üëùì¢‚âº
      ; ‚Üëcls = WFV (Œª ())
      ; ‚Üëwf-ùìó = wfh-add (ùüô-value (ih .‚Üë‚ä¢v) <‚¶Ç-refl) (‚Üëcls ih) (‚Üëwf-ùìó ih)
      ; ‚Üëwf-ùì¢ = ‚Üëwf-ùì¢ ih
      }

eval-soundness {q = ùüö} ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TRef {S = S} {wf = ‚â§-bottop} ‚ä¢e) (ERef {q‚ÇÅ = q‚ÇÅ} {q = q} {ùì¢ = ùì¢} {ùì¢‚Ä≤ = ùì¢‚Ä≤} x ‚áì (refl , refl))
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-bottop ‚ä¢e ‚áì
... | ih
  rewrite sym (‚ä¢‚Çõ-length {ùì¢ = ùì¢‚Ä≤} (ih .‚Üë‚ä¢ùì¢))
 = record
     { ‚ÜëŒ£‚Çï‚Ä≤ = ih .‚ÜëŒ£‚Çï‚Ä≤
     ; ‚ÜëŒ£‚Çõ‚Ä≤ = ih .‚ÜëŒ£‚Çõ‚Ä≤ ++ [ S ]
     ; ‚ÜëŒ£‚âº‚Çï = ih .‚ÜëŒ£‚âº‚Çï
     ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-trans (ih .‚ÜëŒ£‚âº‚Çõ) ([ S ] , refl)
     ; ‚Üë‚ä¢v = TVRef (length-< S (ih .‚ÜëŒ£‚Çõ‚Ä≤) []) (lookup-last S (ih .‚ÜëŒ£‚Çõ‚Ä≤)) <‚¶Ç-refl
     ; ‚Üë‚ä¢ùìó = ih .‚Üë‚ä¢ùìó
     ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢-extend-ùüö {ùì¢ = ùì¢‚Ä≤} S (ih .‚Üë‚ä¢v) (ih .‚Üë‚ä¢ùì¢)
     ; ‚Üëùì¢‚âº = ‚âº‚Çõ-trans {ùì¢‚ÇÅ = ùì¢}{ùì¢‚ÇÇ = ùì¢‚Ä≤}{ùì¢‚ÇÉ = salloc ùì¢‚Ä≤ _ .proj‚ÇÅ} (ih .‚Üëùì¢‚âº) (‚âº‚Çõ-salloc{ùì¢ = ùì¢‚Ä≤})
     ; ‚Üëcls = WFV (Œª ())
     ; ‚Üëwf-ùìó = wfh-ext-‚âº‚Çõ (‚âº‚Çõ-salloc{ùì¢ = ùì¢‚Ä≤}) (‚Üëwf-ùìó ih)
     ; ‚Üëwf-ùì¢ = wfl-add-ùüö (‚Üëcls ih) (‚Üëwf-ùì¢ ih)
     }

eval-soundness {q = ùüö} ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TRef {S = S@ (mkQ ùüô T)} {wf = ‚â§-refl} ‚ä¢e) (ERef {q‚ÇÅ = q‚ÇÅ} {q = q} {ùì¢ = ùì¢} {ùì¢‚Ä≤ = ùì¢‚Ä≤} x ‚áì (refl , refl , refl))
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-refl ‚ä¢e ‚áì
... | ih
  rewrite sym (‚ä¢‚Çï-length (ih .‚Üë‚ä¢ùìó))
  = record
      { ‚ÜëŒ£‚Çï‚Ä≤ = ih .‚ÜëŒ£‚Çï‚Ä≤ ++ [ T ]
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = ih .‚ÜëŒ£‚Çõ‚Ä≤
      ; ‚ÜëŒ£‚âº‚Çï = ‚âº-trans (ih .‚ÜëŒ£‚âº‚Çï) ([ T ] , refl)
      ; ‚ÜëŒ£‚âº‚Çõ = ih .‚ÜëŒ£‚âº‚Çõ
      ; ‚Üë‚ä¢v = TVRef (length-< T (ih .‚ÜëŒ£‚Çï‚Ä≤) []) (lookup-last T (ih .‚ÜëŒ£‚Çï‚Ä≤)) <‚¶Ç-refl
      ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó-extend-ùüô T (‚ä¢v-stack-ùüô (‚Üë‚ä¢v ih)) (‚Üë‚ä¢ùìó ih)
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢-extend-ùüô {ùì¢ = ùì¢‚Ä≤} T (ih .‚Üë‚ä¢ùì¢)
      ; ‚Üëùì¢‚âº = ih .‚Üëùì¢‚âº
      ; ‚Üëcls = WFV (Œª ())
      ; ‚Üëwf-ùìó = wfh-add (ùüô-value (ih .‚Üë‚ä¢v) <‚¶Ç-refl) (‚Üëcls ih) (‚Üëwf-ùìó ih)
      ; ‚Üëwf-ùì¢ = ‚Üëwf-ùì¢ ih
      }

eval-soundness {q = ùüö} ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TRef {S = S@ (mkQ ùüö T)} {wf = ‚â§-refl} ‚ä¢e) (ERef {q‚ÇÅ = q‚ÇÅ} {q = q} {ùì¢ = ùì¢} {ùì¢‚Ä≤ = ùì¢‚Ä≤} x ‚áì (refl , refl))
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-refl ‚ä¢e ‚áì
... | ih
  rewrite sym (‚ä¢‚Çõ-length {ùì¢ = ùì¢‚Ä≤} (ih .‚Üë‚ä¢ùì¢))
  = record
      { ‚ÜëŒ£‚Çï‚Ä≤ = ih .‚ÜëŒ£‚Çï‚Ä≤
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = ih .‚ÜëŒ£‚Çõ‚Ä≤ ++ [ S ]
      ; ‚ÜëŒ£‚âº‚Çï = ih .‚ÜëŒ£‚âº‚Çï
      ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-trans (ih .‚ÜëŒ£‚âº‚Çõ) ([ S ] , refl)
      ; ‚Üë‚ä¢v = TVRef (length-< S (ih .‚ÜëŒ£‚Çõ‚Ä≤) []) (lookup-last S (ih .‚ÜëŒ£‚Çõ‚Ä≤)) <‚¶Ç-refl
      ; ‚Üë‚ä¢ùìó = ih .‚Üë‚ä¢ùìó
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢-extend-ùüö {ùì¢ = ùì¢‚Ä≤} S (ih .‚Üë‚ä¢v) (ih .‚Üë‚ä¢ùì¢)
      ; ‚Üëùì¢‚âº = ‚âº‚Çõ-trans {ùì¢‚ÇÅ = ùì¢}{ùì¢‚ÇÇ = ùì¢‚Ä≤}{ùì¢‚ÇÉ = salloc ùì¢‚Ä≤ _ .proj‚ÇÅ} (ih .‚Üëùì¢‚âº) (‚âº‚Çõ-salloc{ùì¢ = ùì¢‚Ä≤})
      ; ‚Üëcls = WFV (Œª ())
      ; ‚Üëwf-ùìó = wfh-ext-‚âº‚Çõ (‚âº‚Çõ-salloc{ùì¢ = ùì¢‚Ä≤}) (‚Üëwf-ùìó ih)
      ; ‚Üëwf-ùì¢ = wfl-add-ùüö (‚Üëcls ih) (‚Üëwf-ùì¢ ih)
      }

-- dereference

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TDeref {wf = wf} ‚ä¢e) (EDeref {q‚ÇÅ = ùüô} ‚áì hread)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-top ‚ä¢e ‚áì
... | ih@record { ‚ÜëŒ£‚Çï‚Ä≤ = _ ; ‚ÜëŒ£‚Çõ‚Ä≤ = _ ; ‚ÜëŒ£‚âº‚Çï = _ ; ‚ÜëŒ£‚âº‚Çõ = _ ; ‚Üë‚ä¢v = (TVRef ‚Ñì< lkup‚â° (SQual ‚â§-cls (SRef S<‚¶Ç <‚¶ÇS))) ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó‚Ä≤ ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢‚Ä≤ ; ‚Üëùì¢‚âº = _ ; ‚Üëcls = _ }
  with refl ‚Üê <‚¶Ç-antisym S<‚¶Ç <‚¶ÇS
  = record
      { ‚ÜëŒ£‚Çï‚Ä≤ = ih .‚ÜëŒ£‚Çï‚Ä≤
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = ih .‚ÜëŒ£‚Çõ‚Ä≤
      ; ‚ÜëŒ£‚âº‚Çï = ih .‚ÜëŒ£‚âº‚Çï
      ; ‚ÜëŒ£‚âº‚Çõ = ih .‚ÜëŒ£‚âº‚Çõ
      ; ‚Üë‚ä¢v = ‚ä¢v-stack-ùüô (typed-read ‚ä¢ùìó‚Ä≤ ‚Ñì< lkup‚â° hread)
      ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó‚Ä≤
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢‚Ä≤
      ; ‚Üëùì¢‚âº = ih .‚Üëùì¢‚âº
      ; ‚Üëcls = wfh-hread (‚Üëwf-ùìó ih) hread
      ; ‚Üëwf-ùìó = ih .‚Üëwf-ùìó
      ; ‚Üëwf-ùì¢ = ih .‚Üëwf-ùì¢
      }
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TDeref {wf = wf} ‚ä¢e) (EDeref {q‚ÇÅ = ùüö} ‚áì xread)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-top ‚ä¢e ‚áì
... | ih@record { ‚ÜëŒ£‚Çï‚Ä≤ = Œ£‚Çï‚Ä≤ ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ‚Ä≤ ; ‚ÜëŒ£‚âº‚Çï = Œ£‚âº‚Çï ; ‚ÜëŒ£‚âº‚Çõ = Œ£‚âº‚Çõ ; ‚Üë‚ä¢v = TVRef ‚Ñì< lkup‚â° (SQual qsub (SRef S<‚¶Ç <‚¶ÇS)) ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó‚Ä≤ ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢‚Ä≤ ; ‚Üëùì¢‚âº = ùì¢‚âº ; ‚Üëcls = cls ; ‚Üëwf-ùìó = wf-ùìó‚Ä≤ ; ‚Üëwf-ùì¢ = wf-ùì¢‚Ä≤ }
  with refl ‚Üê <‚¶Ç-antisym S<‚¶Ç <‚¶ÇS
  = record
      { ‚ÜëŒ£‚Çï‚Ä≤ = Œ£‚Çï‚Ä≤
      ; ‚ÜëŒ£‚Çõ‚Ä≤ = Œ£‚Çõ‚Ä≤
      ; ‚ÜëŒ£‚âº‚Çï = Œ£‚âº‚Çï
      ; ‚ÜëŒ£‚âº‚Çõ = Œ£‚âº‚Çõ
      ; ‚Üë‚ä¢v = typed-sread ‚ä¢ùì¢‚Ä≤ ‚Ñì< lkup‚â° xread
      ; ‚Üë‚ä¢ùìó = ‚ä¢ùìó‚Ä≤
      ; ‚Üë‚ä¢ùì¢ = ‚ä¢ùì¢‚Ä≤
      ; ‚Üëùì¢‚âº = ùì¢‚âº
      ; ‚Üëcls = wf-sread wf-ùì¢‚Ä≤ xread
      ; ‚Üëwf-ùìó = wf-ùìó‚Ä≤
      ; ‚Üëwf-ùì¢ = wf-ùì¢‚Ä≤
      }


-- setref

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TSetref ‚ä¢e ‚ä¢e‚ÇÅ) (ESetref {ùì¢ = ùì¢}{q‚ÇÅ = ùüô}{ùì¢‚Ä≤ = ùì¢‚Ä≤}{ùì¢‚Ä≥ = ùì¢‚Ä≥} ‚áì ‚áì‚ÇÅ (hwrite , refl))
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-top ‚ä¢e ‚áì
... | ih@record { ‚ÜëŒ£‚Çï‚Ä≤ = _ ; ‚ÜëŒ£‚Çõ‚Ä≤ = _ ; ‚ÜëŒ£‚âº‚Çï = _ ; ‚ÜëŒ£‚âº‚Çõ = _ ; ‚Üë‚ä¢v = (TVRef ‚Ñì< lkup‚â° (SQual qsub (SRef <‚¶ÇS S<‚¶Ç))) ; ‚Üë‚ä¢ùìó = _ ; ‚Üë‚ä¢ùì¢ = _ ; ‚Üëùì¢‚âº = _ ; ‚Üëcls = _ ; ‚Üëwf-ùìó = _ ; ‚Üëwf-ùì¢ = _ }
  with eval-soundness (ih .‚Üë‚ä¢ùìó) (ih .‚Üë‚ä¢ùì¢) (‚ä®-extend (‚ÜëŒ£‚âº‚Çï ih) (‚ÜëŒ£‚âº‚Çõ ih) (‚Üëùì¢‚âº ih) ‚ä®ùìî) (wfe-ext-‚âº‚Çõ (‚Üëùì¢‚âº ih) ùìî-wft) (‚Üëwf-ùìó ih) (‚Üëwf-ùì¢ ih) (q-of-mono S<‚¶Ç) ‚ä¢e‚ÇÅ ‚áì‚ÇÅ
... | ih‚ÇÅ
  with refl ‚Üê <‚¶Ç-antisym  S<‚¶Ç <‚¶ÇS
  = record
              { ‚ÜëŒ£‚Çï‚Ä≤ = ih‚ÇÅ .‚ÜëŒ£‚Çï‚Ä≤
              ; ‚ÜëŒ£‚Çõ‚Ä≤ = ih‚ÇÅ .‚ÜëŒ£‚Çõ‚Ä≤
              ; ‚ÜëŒ£‚âº‚Çï = ‚âº-trans (ih .‚ÜëŒ£‚âº‚Çï) (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çï)
              ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-trans (ih .‚ÜëŒ£‚âº‚Çõ) (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çõ)
              ; ‚Üë‚ä¢v = TVUnit
              ; ‚Üë‚ä¢ùìó = typed-write (ih‚ÇÅ .‚Üë‚ä¢ùìó)
                                   (‚â§‚Ñï-trans ‚Ñì< (‚âº‚áílength (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çï)))
                                   (trans (trans (cong (lookup (ih‚ÇÅ .‚ÜëŒ£‚Çï‚Ä≤)) (from‚Ñï-inject‚â§ (‚âº‚áílength (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çï)) ‚Ñì<)) (sym (‚âº-lookup (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çï) _))) lkup‚â°)
                                   (ih‚ÇÅ .‚Üë‚ä¢v)
                                   hwrite
              ; ‚Üë‚ä¢ùì¢ = ih‚ÇÅ .‚Üë‚ä¢ùì¢
              ; ‚Üëùì¢‚âº = ‚âº‚Çõ-trans{ùì¢‚ÇÅ = ùì¢}{ùì¢‚ÇÇ = ùì¢‚Ä≤}{ùì¢‚ÇÉ = ùì¢‚Ä≥} (ih .‚Üëùì¢‚âº) (ih‚ÇÅ .‚Üëùì¢‚âº)
              ; ‚Üëcls = WFV (Œª())
              ; ‚Üëwf-ùìó = wfh-write (ùüô-value (ih‚ÇÅ .‚Üë‚ä¢v) <‚¶Ç-refl ) (ih‚ÇÅ .‚Üëcls) hwrite (ih‚ÇÅ .‚Üëwf-ùìó)
              ; ‚Üëwf-ùì¢ = ih‚ÇÅ .‚Üëwf-ùì¢
              }

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-q (TSetref ‚ä¢e ‚ä¢e‚ÇÅ) (ESetref {ùì¢ = ùì¢}{q‚ÇÅ = ùüö}{ùì¢‚Ä≤ = ùì¢‚Ä≤}{ùì¢‚Ä≥ = ùì¢‚Ä≥}{ùì¢‚Ä¥ = ùì¢‚Ä¥} ‚áì ‚áì‚ÇÅ (refl , stwrite))
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä®ùìî ùìî-wft wf-ùìó wf-ùì¢ ‚â§-top ‚ä¢e ‚áì
... | ih@record { ‚ÜëŒ£‚Çï‚Ä≤ = _ ; ‚ÜëŒ£‚Çõ‚Ä≤ = _ ; ‚ÜëŒ£‚âº‚Çï = _ ; ‚ÜëŒ£‚âº‚Çõ = _ ; ‚Üë‚ä¢v = (TVRef ‚Ñì< lkup‚â° (SQual qsub (SRef <‚¶ÇS S<‚¶Ç))) ; ‚Üë‚ä¢ùìó = _ ; ‚Üë‚ä¢ùì¢ = _ ; ‚Üëùì¢‚âº = _ ; ‚Üëcls = _ ; ‚Üëwf-ùìó = _ ; ‚Üëwf-ùì¢ = _ }
  with eval-soundness (ih .‚Üë‚ä¢ùìó) (ih .‚Üë‚ä¢ùì¢) (‚ä®-extend (‚ÜëŒ£‚âº‚Çï ih) (‚ÜëŒ£‚âº‚Çõ ih) (‚Üëùì¢‚âº ih) ‚ä®ùìî) (wfe-ext-‚âº‚Çõ (‚Üëùì¢‚âº ih) ùìî-wft) (‚Üëwf-ùìó ih) (‚Üëwf-ùì¢ ih) ‚â§-top ‚ä¢e‚ÇÅ ‚áì‚ÇÅ
... | ih‚ÇÅ
  with refl ‚Üê <‚¶Ç-antisym  S<‚¶Ç <‚¶ÇS
  using ùì¢‚Ä≥‚âº‚Çõùì¢‚Ä¥ ‚Üê ‚âº‚Çõ-swrite stwrite
  with swrite0 xwrite ‚Üê stwrite
  = record
              { ‚ÜëŒ£‚Çï‚Ä≤ = ih‚ÇÅ .‚ÜëŒ£‚Çï‚Ä≤
              ; ‚ÜëŒ£‚Çõ‚Ä≤ = ih‚ÇÅ .‚ÜëŒ£‚Çõ‚Ä≤
              ; ‚ÜëŒ£‚âº‚Çï = ‚âº-trans (ih .‚ÜëŒ£‚âº‚Çï) (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çï)
              ; ‚ÜëŒ£‚âº‚Çõ = ‚âº-trans (ih .‚ÜëŒ£‚âº‚Çõ) (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çõ)
              ; ‚Üë‚ä¢v = TVUnit
              ; ‚Üë‚ä¢ùìó = ih‚ÇÅ .‚Üë‚ä¢ùìó
              ; ‚Üë‚ä¢ùì¢ = typed-swrite (ih‚ÇÅ .‚Üë‚ä¢ùì¢)
                                   (‚â§‚Ñï-trans ‚Ñì< (‚âº‚áílength (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çõ)))
                                   (trans (trans (cong (lookup (ih‚ÇÅ .‚ÜëŒ£‚Çõ‚Ä≤)) (from‚Ñï-inject‚â§ (‚âº‚áílength (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çõ)) ‚Ñì<)) (sym (‚âº-lookup (ih‚ÇÅ .‚ÜëŒ£‚âº‚Çõ) _))) lkup‚â°)
                                   (ih‚ÇÅ .‚Üë‚ä¢v)
                                   stwrite 
              ; ‚Üëùì¢‚âº = ‚âº‚Çõ-trans{ùì¢‚ÇÅ = ùì¢}{ùì¢‚ÇÇ = ùì¢‚Ä≥}{ùì¢‚ÇÉ = ùì¢‚Ä¥} (‚âº‚Çõ-trans{ùì¢‚ÇÅ = ùì¢}{ùì¢‚ÇÇ = ùì¢‚Ä≤}{ùì¢‚ÇÉ = ùì¢‚Ä≥} (ih .‚Üëùì¢‚âº) (ih‚ÇÅ .‚Üëùì¢‚âº)) ùì¢‚Ä≥‚âº‚Çõùì¢‚Ä¥
              ; ‚Üëcls = WFV (Œª())
              ; ‚Üëwf-ùìó = wfh-ext-‚âº‚Çõ ùì¢‚Ä≥‚âº‚Çõùì¢‚Ä¥ (ih‚ÇÅ .‚Üëwf-ùìó)
              ; ‚Üëwf-ùì¢ = let r = wfl-write (ih‚ÇÅ .‚Üëcls) xwrite (ih‚ÇÅ .‚Üëwf-ùì¢) in wfl-ext-‚âº‚Çõ (‚âº‚Çõ-swrite stwrite) r
              }
